// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.36.4
// 	protoc        v5.29.3
// source: vision.proto

package vision

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	timestamppb "google.golang.org/protobuf/types/known/timestamppb"
	wrapperspb "google.golang.org/protobuf/types/known/wrapperspb"
	reflect "reflect"
	sync "sync"
	unsafe "unsafe"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type OccupancyMap_Type int32

const (
	OccupancyMap_UNKNOWN  OccupancyMap_Type = 0
	OccupancyMap_EMPTY    OccupancyMap_Type = 1
	OccupancyMap_OCCUPIED OccupancyMap_Type = 2
	OccupancyMap_MERGED   OccupancyMap_Type = 3
)

// Enum value maps for OccupancyMap_Type.
var (
	OccupancyMap_Type_name = map[int32]string{
		0: "UNKNOWN",
		1: "EMPTY",
		2: "OCCUPIED",
		3: "MERGED",
	}
	OccupancyMap_Type_value = map[string]int32{
		"UNKNOWN":  0,
		"EMPTY":    1,
		"OCCUPIED": 2,
		"MERGED":   3,
	}
)

func (x OccupancyMap_Type) Enum() *OccupancyMap_Type {
	p := new(OccupancyMap_Type)
	*p = x
	return p
}

func (x OccupancyMap_Type) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (OccupancyMap_Type) Descriptor() protoreflect.EnumDescriptor {
	return file_vision_proto_enumTypes[0].Descriptor()
}

func (OccupancyMap_Type) Type() protoreflect.EnumType {
	return &file_vision_proto_enumTypes[0]
}

func (x OccupancyMap_Type) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use OccupancyMap_Type.Descriptor instead.
func (OccupancyMap_Type) EnumDescriptor() ([]byte, []int) {
	return file_vision_proto_rawDescGZIP(), []int{3, 0}
}

type Color struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Red           float32                `protobuf:"fixed32,1,opt,name=red,proto3" json:"red,omitempty"`     // [0, 1]
	Green         float32                `protobuf:"fixed32,2,opt,name=green,proto3" json:"green,omitempty"` // [0, 1]
	Blue          float32                `protobuf:"fixed32,3,opt,name=blue,proto3" json:"blue,omitempty"`   // [0, 1]
	Alpha         *wrapperspb.FloatValue `protobuf:"bytes,4,opt,name=alpha,proto3" json:"alpha,omitempty"`   // [0, 1], unset = 1
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *Color) Reset() {
	*x = Color{}
	mi := &file_vision_proto_msgTypes[0]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Color) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Color) ProtoMessage() {}

func (x *Color) ProtoReflect() protoreflect.Message {
	mi := &file_vision_proto_msgTypes[0]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Color.ProtoReflect.Descriptor instead.
func (*Color) Descriptor() ([]byte, []int) {
	return file_vision_proto_rawDescGZIP(), []int{0}
}

func (x *Color) GetRed() float32 {
	if x != nil {
		return x.Red
	}
	return 0
}

func (x *Color) GetGreen() float32 {
	if x != nil {
		return x.Green
	}
	return 0
}

func (x *Color) GetBlue() float32 {
	if x != nil {
		return x.Blue
	}
	return 0
}

func (x *Color) GetAlpha() *wrapperspb.FloatValue {
	if x != nil {
		return x.Alpha
	}
	return nil
}

type FramePrediction struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	X             float32                `protobuf:"fixed32,1,opt,name=x,proto3" json:"x,omitempty"` // top left
	Y             float32                `protobuf:"fixed32,2,opt,name=y,proto3" json:"y,omitempty"` // top left
	Width         float32                `protobuf:"fixed32,3,opt,name=width,proto3" json:"width,omitempty"`
	Height        float32                `protobuf:"fixed32,4,opt,name=height,proto3" json:"height,omitempty"`
	Confidence    float32                `protobuf:"fixed32,5,opt,name=confidence,proto3" json:"confidence,omitempty"`
	ClassId       int32                  `protobuf:"varint,6,opt,name=class_id,json=classId,proto3" json:"class_id,omitempty"`
	ClassName     string                 `protobuf:"bytes,7,opt,name=class_name,json=className,proto3" json:"class_name,omitempty"`
	ClassColor    *Color                 `protobuf:"bytes,8,opt,name=class_color,json=classColor,proto3" json:"class_color,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *FramePrediction) Reset() {
	*x = FramePrediction{}
	mi := &file_vision_proto_msgTypes[1]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *FramePrediction) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FramePrediction) ProtoMessage() {}

func (x *FramePrediction) ProtoReflect() protoreflect.Message {
	mi := &file_vision_proto_msgTypes[1]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FramePrediction.ProtoReflect.Descriptor instead.
func (*FramePrediction) Descriptor() ([]byte, []int) {
	return file_vision_proto_rawDescGZIP(), []int{1}
}

func (x *FramePrediction) GetX() float32 {
	if x != nil {
		return x.X
	}
	return 0
}

func (x *FramePrediction) GetY() float32 {
	if x != nil {
		return x.Y
	}
	return 0
}

func (x *FramePrediction) GetWidth() float32 {
	if x != nil {
		return x.Width
	}
	return 0
}

func (x *FramePrediction) GetHeight() float32 {
	if x != nil {
		return x.Height
	}
	return 0
}

func (x *FramePrediction) GetConfidence() float32 {
	if x != nil {
		return x.Confidence
	}
	return 0
}

func (x *FramePrediction) GetClassId() int32 {
	if x != nil {
		return x.ClassId
	}
	return 0
}

func (x *FramePrediction) GetClassName() string {
	if x != nil {
		return x.ClassName
	}
	return ""
}

func (x *FramePrediction) GetClassColor() *Color {
	if x != nil {
		return x.ClassColor
	}
	return nil
}

type Frame struct {
	state                protoimpl.MessageState `protogen:"open.v1"`
	FrameNumber          uint64                 `protobuf:"varint,1,opt,name=frame_number,json=frameNumber,proto3" json:"frame_number,omitempty"`
	TtagSystem           *timestamppb.Timestamp `protobuf:"bytes,2,opt,name=ttag_system,json=ttagSystem,proto3" json:"ttag_system,omitempty"`
	TtagSteadyNs         uint64                 `protobuf:"varint,3,opt,name=ttag_steady_ns,json=ttagSteadyNs,proto3" json:"ttag_steady_ns,omitempty"`
	PredictionDurationMs uint32                 `protobuf:"varint,4,opt,name=prediction_duration_ms,json=predictionDurationMs,proto3" json:"prediction_duration_ms,omitempty"`
	Predictions          []*FramePrediction     `protobuf:"bytes,5,rep,name=predictions,proto3" json:"predictions,omitempty"`
	unknownFields        protoimpl.UnknownFields
	sizeCache            protoimpl.SizeCache
}

func (x *Frame) Reset() {
	*x = Frame{}
	mi := &file_vision_proto_msgTypes[2]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Frame) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Frame) ProtoMessage() {}

func (x *Frame) ProtoReflect() protoreflect.Message {
	mi := &file_vision_proto_msgTypes[2]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Frame.ProtoReflect.Descriptor instead.
func (*Frame) Descriptor() ([]byte, []int) {
	return file_vision_proto_rawDescGZIP(), []int{2}
}

func (x *Frame) GetFrameNumber() uint64 {
	if x != nil {
		return x.FrameNumber
	}
	return 0
}

func (x *Frame) GetTtagSystem() *timestamppb.Timestamp {
	if x != nil {
		return x.TtagSystem
	}
	return nil
}

func (x *Frame) GetTtagSteadyNs() uint64 {
	if x != nil {
		return x.TtagSteadyNs
	}
	return 0
}

func (x *Frame) GetPredictionDurationMs() uint32 {
	if x != nil {
		return x.PredictionDurationMs
	}
	return 0
}

func (x *Frame) GetPredictions() []*FramePrediction {
	if x != nil {
		return x.Predictions
	}
	return nil
}

type OccupancyMap struct {
	state        protoimpl.MessageState `protogen:"open.v1"`
	TtagSystem   *timestamppb.Timestamp `protobuf:"bytes,1,opt,name=ttag_system,json=ttagSystem,proto3" json:"ttag_system,omitempty"`
	TtagSteadyNs uint64                 `protobuf:"varint,2,opt,name=ttag_steady_ns,json=ttagSteadyNs,proto3" json:"ttag_steady_ns,omitempty"`
	Type         OccupancyMap_Type      `protobuf:"varint,3,opt,name=type,proto3,enum=magothy.protobuf.vision.OccupancyMap_Type" json:"type,omitempty"`
	LatDeg       float64                `protobuf:"fixed64,4,opt,name=lat_deg,json=latDeg,proto3" json:"lat_deg,omitempty"` // center of map
	LonDeg       float64                `protobuf:"fixed64,5,opt,name=lon_deg,json=lonDeg,proto3" json:"lon_deg,omitempty"` // center of map
	WidthM       float64                `protobuf:"fixed64,6,opt,name=width_m,json=widthM,proto3" json:"width_m,omitempty"`
	HeightM      float64                `protobuf:"fixed64,7,opt,name=height_m,json=heightM,proto3" json:"height_m,omitempty"`
	WidthPx      uint32                 `protobuf:"varint,8,opt,name=width_px,json=widthPx,proto3" json:"width_px,omitempty"`
	HeightPx     uint32                 `protobuf:"varint,9,opt,name=height_px,json=heightPx,proto3" json:"height_px,omitempty"`
	// size == width_px * height_px, row-major order
	// first pixel is top-left
	// 1 byte per pixel, 0-255 belief
	// 0 = no belief, 255 = full belief
	Grid          []byte `protobuf:"bytes,10,opt,name=grid,proto3" json:"grid,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *OccupancyMap) Reset() {
	*x = OccupancyMap{}
	mi := &file_vision_proto_msgTypes[3]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *OccupancyMap) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*OccupancyMap) ProtoMessage() {}

func (x *OccupancyMap) ProtoReflect() protoreflect.Message {
	mi := &file_vision_proto_msgTypes[3]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use OccupancyMap.ProtoReflect.Descriptor instead.
func (*OccupancyMap) Descriptor() ([]byte, []int) {
	return file_vision_proto_rawDescGZIP(), []int{3}
}

func (x *OccupancyMap) GetTtagSystem() *timestamppb.Timestamp {
	if x != nil {
		return x.TtagSystem
	}
	return nil
}

func (x *OccupancyMap) GetTtagSteadyNs() uint64 {
	if x != nil {
		return x.TtagSteadyNs
	}
	return 0
}

func (x *OccupancyMap) GetType() OccupancyMap_Type {
	if x != nil {
		return x.Type
	}
	return OccupancyMap_UNKNOWN
}

func (x *OccupancyMap) GetLatDeg() float64 {
	if x != nil {
		return x.LatDeg
	}
	return 0
}

func (x *OccupancyMap) GetLonDeg() float64 {
	if x != nil {
		return x.LonDeg
	}
	return 0
}

func (x *OccupancyMap) GetWidthM() float64 {
	if x != nil {
		return x.WidthM
	}
	return 0
}

func (x *OccupancyMap) GetHeightM() float64 {
	if x != nil {
		return x.HeightM
	}
	return 0
}

func (x *OccupancyMap) GetWidthPx() uint32 {
	if x != nil {
		return x.WidthPx
	}
	return 0
}

func (x *OccupancyMap) GetHeightPx() uint32 {
	if x != nil {
		return x.HeightPx
	}
	return 0
}

func (x *OccupancyMap) GetGrid() []byte {
	if x != nil {
		return x.Grid
	}
	return nil
}

var File_vision_proto protoreflect.FileDescriptor

var file_vision_proto_rawDesc = string([]byte{
	0x0a, 0x0c, 0x76, 0x69, 0x73, 0x69, 0x6f, 0x6e, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x17,
	0x6d, 0x61, 0x67, 0x6f, 0x74, 0x68, 0x79, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66,
	0x2e, 0x76, 0x69, 0x73, 0x69, 0x6f, 0x6e, 0x1a, 0x1f, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61,
	0x6d, 0x70, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x77, 0x72, 0x61, 0x70, 0x70, 0x65,
	0x72, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0x76, 0x0a, 0x05, 0x43, 0x6f, 0x6c, 0x6f,
	0x72, 0x12, 0x10, 0x0a, 0x03, 0x72, 0x65, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x02, 0x52, 0x03,
	0x72, 0x65, 0x64, 0x12, 0x14, 0x0a, 0x05, 0x67, 0x72, 0x65, 0x65, 0x6e, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x02, 0x52, 0x05, 0x67, 0x72, 0x65, 0x65, 0x6e, 0x12, 0x12, 0x0a, 0x04, 0x62, 0x6c, 0x75,
	0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x02, 0x52, 0x04, 0x62, 0x6c, 0x75, 0x65, 0x12, 0x31, 0x0a,
	0x05, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x46,
	0x6c, 0x6f, 0x61, 0x74, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x05, 0x61, 0x6c, 0x70, 0x68, 0x61,
	0x22, 0xf6, 0x01, 0x0a, 0x0f, 0x46, 0x72, 0x61, 0x6d, 0x65, 0x50, 0x72, 0x65, 0x64, 0x69, 0x63,
	0x74, 0x69, 0x6f, 0x6e, 0x12, 0x0c, 0x0a, 0x01, 0x78, 0x18, 0x01, 0x20, 0x01, 0x28, 0x02, 0x52,
	0x01, 0x78, 0x12, 0x0c, 0x0a, 0x01, 0x79, 0x18, 0x02, 0x20, 0x01, 0x28, 0x02, 0x52, 0x01, 0x79,
	0x12, 0x14, 0x0a, 0x05, 0x77, 0x69, 0x64, 0x74, 0x68, 0x18, 0x03, 0x20, 0x01, 0x28, 0x02, 0x52,
	0x05, 0x77, 0x69, 0x64, 0x74, 0x68, 0x12, 0x16, 0x0a, 0x06, 0x68, 0x65, 0x69, 0x67, 0x68, 0x74,
	0x18, 0x04, 0x20, 0x01, 0x28, 0x02, 0x52, 0x06, 0x68, 0x65, 0x69, 0x67, 0x68, 0x74, 0x12, 0x1e,
	0x0a, 0x0a, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x64, 0x65, 0x6e, 0x63, 0x65, 0x18, 0x05, 0x20, 0x01,
	0x28, 0x02, 0x52, 0x0a, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x64, 0x65, 0x6e, 0x63, 0x65, 0x12, 0x19,
	0x0a, 0x08, 0x63, 0x6c, 0x61, 0x73, 0x73, 0x5f, 0x69, 0x64, 0x18, 0x06, 0x20, 0x01, 0x28, 0x05,
	0x52, 0x07, 0x63, 0x6c, 0x61, 0x73, 0x73, 0x49, 0x64, 0x12, 0x1d, 0x0a, 0x0a, 0x63, 0x6c, 0x61,
	0x73, 0x73, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x63,
	0x6c, 0x61, 0x73, 0x73, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x3f, 0x0a, 0x0b, 0x63, 0x6c, 0x61, 0x73,
	0x73, 0x5f, 0x63, 0x6f, 0x6c, 0x6f, 0x72, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1e, 0x2e,
	0x6d, 0x61, 0x67, 0x6f, 0x74, 0x68, 0x79, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66,
	0x2e, 0x76, 0x69, 0x73, 0x69, 0x6f, 0x6e, 0x2e, 0x43, 0x6f, 0x6c, 0x6f, 0x72, 0x52, 0x0a, 0x63,
	0x6c, 0x61, 0x73, 0x73, 0x43, 0x6f, 0x6c, 0x6f, 0x72, 0x22, 0x8f, 0x02, 0x0a, 0x05, 0x46, 0x72,
	0x61, 0x6d, 0x65, 0x12, 0x21, 0x0a, 0x0c, 0x66, 0x72, 0x61, 0x6d, 0x65, 0x5f, 0x6e, 0x75, 0x6d,
	0x62, 0x65, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0b, 0x66, 0x72, 0x61, 0x6d, 0x65,
	0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x12, 0x3b, 0x0a, 0x0b, 0x74, 0x74, 0x61, 0x67, 0x5f, 0x73,
	0x79, 0x73, 0x74, 0x65, 0x6d, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69,
	0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x0a, 0x74, 0x74, 0x61, 0x67, 0x53, 0x79, 0x73,
	0x74, 0x65, 0x6d, 0x12, 0x24, 0x0a, 0x0e, 0x74, 0x74, 0x61, 0x67, 0x5f, 0x73, 0x74, 0x65, 0x61,
	0x64, 0x79, 0x5f, 0x6e, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0c, 0x74, 0x74, 0x61,
	0x67, 0x53, 0x74, 0x65, 0x61, 0x64, 0x79, 0x4e, 0x73, 0x12, 0x34, 0x0a, 0x16, 0x70, 0x72, 0x65,
	0x64, 0x69, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x64, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x5f, 0x6d, 0x73, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x14, 0x70, 0x72, 0x65, 0x64, 0x69,
	0x63, 0x74, 0x69, 0x6f, 0x6e, 0x44, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x4d, 0x73, 0x12,
	0x4a, 0x0a, 0x0b, 0x70, 0x72, 0x65, 0x64, 0x69, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x05,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x28, 0x2e, 0x6d, 0x61, 0x67, 0x6f, 0x74, 0x68, 0x79, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x76, 0x69, 0x73, 0x69, 0x6f, 0x6e, 0x2e, 0x46,
	0x72, 0x61, 0x6d, 0x65, 0x50, 0x72, 0x65, 0x64, 0x69, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x0b,
	0x70, 0x72, 0x65, 0x64, 0x69, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x22, 0x9d, 0x03, 0x0a, 0x0c,
	0x4f, 0x63, 0x63, 0x75, 0x70, 0x61, 0x6e, 0x63, 0x79, 0x4d, 0x61, 0x70, 0x12, 0x3b, 0x0a, 0x0b,
	0x74, 0x74, 0x61, 0x67, 0x5f, 0x73, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x0a, 0x74,
	0x74, 0x61, 0x67, 0x53, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x12, 0x24, 0x0a, 0x0e, 0x74, 0x74, 0x61,
	0x67, 0x5f, 0x73, 0x74, 0x65, 0x61, 0x64, 0x79, 0x5f, 0x6e, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x04, 0x52, 0x0c, 0x74, 0x74, 0x61, 0x67, 0x53, 0x74, 0x65, 0x61, 0x64, 0x79, 0x4e, 0x73, 0x12,
	0x3e, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x2a, 0x2e,
	0x6d, 0x61, 0x67, 0x6f, 0x74, 0x68, 0x79, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66,
	0x2e, 0x76, 0x69, 0x73, 0x69, 0x6f, 0x6e, 0x2e, 0x4f, 0x63, 0x63, 0x75, 0x70, 0x61, 0x6e, 0x63,
	0x79, 0x4d, 0x61, 0x70, 0x2e, 0x54, 0x79, 0x70, 0x65, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x12,
	0x17, 0x0a, 0x07, 0x6c, 0x61, 0x74, 0x5f, 0x64, 0x65, 0x67, 0x18, 0x04, 0x20, 0x01, 0x28, 0x01,
	0x52, 0x06, 0x6c, 0x61, 0x74, 0x44, 0x65, 0x67, 0x12, 0x17, 0x0a, 0x07, 0x6c, 0x6f, 0x6e, 0x5f,
	0x64, 0x65, 0x67, 0x18, 0x05, 0x20, 0x01, 0x28, 0x01, 0x52, 0x06, 0x6c, 0x6f, 0x6e, 0x44, 0x65,
	0x67, 0x12, 0x17, 0x0a, 0x07, 0x77, 0x69, 0x64, 0x74, 0x68, 0x5f, 0x6d, 0x18, 0x06, 0x20, 0x01,
	0x28, 0x01, 0x52, 0x06, 0x77, 0x69, 0x64, 0x74, 0x68, 0x4d, 0x12, 0x19, 0x0a, 0x08, 0x68, 0x65,
	0x69, 0x67, 0x68, 0x74, 0x5f, 0x6d, 0x18, 0x07, 0x20, 0x01, 0x28, 0x01, 0x52, 0x07, 0x68, 0x65,
	0x69, 0x67, 0x68, 0x74, 0x4d, 0x12, 0x19, 0x0a, 0x08, 0x77, 0x69, 0x64, 0x74, 0x68, 0x5f, 0x70,
	0x78, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x07, 0x77, 0x69, 0x64, 0x74, 0x68, 0x50, 0x78,
	0x12, 0x1b, 0x0a, 0x09, 0x68, 0x65, 0x69, 0x67, 0x68, 0x74, 0x5f, 0x70, 0x78, 0x18, 0x09, 0x20,
	0x01, 0x28, 0x0d, 0x52, 0x08, 0x68, 0x65, 0x69, 0x67, 0x68, 0x74, 0x50, 0x78, 0x12, 0x12, 0x0a,
	0x04, 0x67, 0x72, 0x69, 0x64, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x04, 0x67, 0x72, 0x69,
	0x64, 0x22, 0x38, 0x0a, 0x04, 0x54, 0x79, 0x70, 0x65, 0x12, 0x0b, 0x0a, 0x07, 0x55, 0x4e, 0x4b,
	0x4e, 0x4f, 0x57, 0x4e, 0x10, 0x00, 0x12, 0x09, 0x0a, 0x05, 0x45, 0x4d, 0x50, 0x54, 0x59, 0x10,
	0x01, 0x12, 0x0c, 0x0a, 0x08, 0x4f, 0x43, 0x43, 0x55, 0x50, 0x49, 0x45, 0x44, 0x10, 0x02, 0x12,
	0x0a, 0x0a, 0x06, 0x4d, 0x45, 0x52, 0x47, 0x45, 0x44, 0x10, 0x03, 0x62, 0x06, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x33,
})

var (
	file_vision_proto_rawDescOnce sync.Once
	file_vision_proto_rawDescData []byte
)

func file_vision_proto_rawDescGZIP() []byte {
	file_vision_proto_rawDescOnce.Do(func() {
		file_vision_proto_rawDescData = protoimpl.X.CompressGZIP(unsafe.Slice(unsafe.StringData(file_vision_proto_rawDesc), len(file_vision_proto_rawDesc)))
	})
	return file_vision_proto_rawDescData
}

var file_vision_proto_enumTypes = make([]protoimpl.EnumInfo, 1)
var file_vision_proto_msgTypes = make([]protoimpl.MessageInfo, 4)
var file_vision_proto_goTypes = []any{
	(OccupancyMap_Type)(0),        // 0: magothy.protobuf.vision.OccupancyMap.Type
	(*Color)(nil),                 // 1: magothy.protobuf.vision.Color
	(*FramePrediction)(nil),       // 2: magothy.protobuf.vision.FramePrediction
	(*Frame)(nil),                 // 3: magothy.protobuf.vision.Frame
	(*OccupancyMap)(nil),          // 4: magothy.protobuf.vision.OccupancyMap
	(*wrapperspb.FloatValue)(nil), // 5: google.protobuf.FloatValue
	(*timestamppb.Timestamp)(nil), // 6: google.protobuf.Timestamp
}
var file_vision_proto_depIdxs = []int32{
	5, // 0: magothy.protobuf.vision.Color.alpha:type_name -> google.protobuf.FloatValue
	1, // 1: magothy.protobuf.vision.FramePrediction.class_color:type_name -> magothy.protobuf.vision.Color
	6, // 2: magothy.protobuf.vision.Frame.ttag_system:type_name -> google.protobuf.Timestamp
	2, // 3: magothy.protobuf.vision.Frame.predictions:type_name -> magothy.protobuf.vision.FramePrediction
	6, // 4: magothy.protobuf.vision.OccupancyMap.ttag_system:type_name -> google.protobuf.Timestamp
	0, // 5: magothy.protobuf.vision.OccupancyMap.type:type_name -> magothy.protobuf.vision.OccupancyMap.Type
	6, // [6:6] is the sub-list for method output_type
	6, // [6:6] is the sub-list for method input_type
	6, // [6:6] is the sub-list for extension type_name
	6, // [6:6] is the sub-list for extension extendee
	0, // [0:6] is the sub-list for field type_name
}

func init() { file_vision_proto_init() }
func file_vision_proto_init() {
	if File_vision_proto != nil {
		return
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: unsafe.Slice(unsafe.StringData(file_vision_proto_rawDesc), len(file_vision_proto_rawDesc)),
			NumEnums:      1,
			NumMessages:   4,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_vision_proto_goTypes,
		DependencyIndexes: file_vision_proto_depIdxs,
		EnumInfos:         file_vision_proto_enumTypes,
		MessageInfos:      file_vision_proto_msgTypes,
	}.Build()
	File_vision_proto = out.File
	file_vision_proto_goTypes = nil
	file_vision_proto_depIdxs = nil
}
