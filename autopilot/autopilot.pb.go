// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.36.4
// 	protoc        v5.29.3
// source: autopilot.proto

package autopilot

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	timestamppb "google.golang.org/protobuf/types/known/timestamppb"
	reflect "reflect"
	sync "sync"
	unsafe "unsafe"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type VehicleData_DataSource int32

const (
	VehicleData_DS_NODATA      VehicleData_DataSource = 0  // no data for a particular field
	VehicleData_DS_IMU         VehicleData_DataSource = 1  // Inertial Measurement Unit
	VehicleData_DS_AHRS        VehicleData_DataSource = 2  // Attitude and Heading Reference System
	VehicleData_DS_GPS         VehicleData_DataSource = 3  // GNSS (GPS, GLONASS, etc.)
	VehicleData_DS_DEPTH       VehicleData_DataSource = 4  // depth sensor
	VehicleData_DS_ALTITUDE    VehicleData_DataSource = 5  // altitude sensor
	VehicleData_DS_SPEED       VehicleData_DataSource = 6  // speed sensor
	VehicleData_DS_ESTIMATION  VehicleData_DataSource = 7  // estimation algorithm such as Kalman filter
	VehicleData_DS_COMPUTATION VehicleData_DataSource = 8  // such as heading rate computed by differentiating heading
	VehicleData_DS_SIMULATION  VehicleData_DataSource = 9  //
	VehicleData_DS_INS         VehicleData_DataSource = 10 // Inertial Navigation System
)

// Enum value maps for VehicleData_DataSource.
var (
	VehicleData_DataSource_name = map[int32]string{
		0:  "DS_NODATA",
		1:  "DS_IMU",
		2:  "DS_AHRS",
		3:  "DS_GPS",
		4:  "DS_DEPTH",
		5:  "DS_ALTITUDE",
		6:  "DS_SPEED",
		7:  "DS_ESTIMATION",
		8:  "DS_COMPUTATION",
		9:  "DS_SIMULATION",
		10: "DS_INS",
	}
	VehicleData_DataSource_value = map[string]int32{
		"DS_NODATA":      0,
		"DS_IMU":         1,
		"DS_AHRS":        2,
		"DS_GPS":         3,
		"DS_DEPTH":       4,
		"DS_ALTITUDE":    5,
		"DS_SPEED":       6,
		"DS_ESTIMATION":  7,
		"DS_COMPUTATION": 8,
		"DS_SIMULATION":  9,
		"DS_INS":         10,
	}
)

func (x VehicleData_DataSource) Enum() *VehicleData_DataSource {
	p := new(VehicleData_DataSource)
	*p = x
	return p
}

func (x VehicleData_DataSource) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (VehicleData_DataSource) Descriptor() protoreflect.EnumDescriptor {
	return file_autopilot_proto_enumTypes[0].Descriptor()
}

func (VehicleData_DataSource) Type() protoreflect.EnumType {
	return &file_autopilot_proto_enumTypes[0]
}

func (x VehicleData_DataSource) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use VehicleData_DataSource.Descriptor instead.
func (VehicleData_DataSource) EnumDescriptor() ([]byte, []int) {
	return file_autopilot_proto_rawDescGZIP(), []int{9, 0}
}

type GpsIf_GgaData_FixQuality int32

const (
	GpsIf_GgaData_FQ_INVALID    GpsIf_GgaData_FixQuality = 0
	GpsIf_GgaData_FQ_GPS        GpsIf_GgaData_FixQuality = 1
	GpsIf_GgaData_FQ_DGPS       GpsIf_GgaData_FixQuality = 2
	GpsIf_GgaData_FQ_PPS        GpsIf_GgaData_FixQuality = 3
	GpsIf_GgaData_FQ_RTK_FIXED  GpsIf_GgaData_FixQuality = 4
	GpsIf_GgaData_FQ_RTK_FLOAT  GpsIf_GgaData_FixQuality = 5
	GpsIf_GgaData_FQ_ESTIMATED  GpsIf_GgaData_FixQuality = 6
	GpsIf_GgaData_FQ_MANUAL     GpsIf_GgaData_FixQuality = 7
	GpsIf_GgaData_FQ_SIMULATION GpsIf_GgaData_FixQuality = 8
)

// Enum value maps for GpsIf_GgaData_FixQuality.
var (
	GpsIf_GgaData_FixQuality_name = map[int32]string{
		0: "FQ_INVALID",
		1: "FQ_GPS",
		2: "FQ_DGPS",
		3: "FQ_PPS",
		4: "FQ_RTK_FIXED",
		5: "FQ_RTK_FLOAT",
		6: "FQ_ESTIMATED",
		7: "FQ_MANUAL",
		8: "FQ_SIMULATION",
	}
	GpsIf_GgaData_FixQuality_value = map[string]int32{
		"FQ_INVALID":    0,
		"FQ_GPS":        1,
		"FQ_DGPS":       2,
		"FQ_PPS":        3,
		"FQ_RTK_FIXED":  4,
		"FQ_RTK_FLOAT":  5,
		"FQ_ESTIMATED":  6,
		"FQ_MANUAL":     7,
		"FQ_SIMULATION": 8,
	}
)

func (x GpsIf_GgaData_FixQuality) Enum() *GpsIf_GgaData_FixQuality {
	p := new(GpsIf_GgaData_FixQuality)
	*p = x
	return p
}

func (x GpsIf_GgaData_FixQuality) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (GpsIf_GgaData_FixQuality) Descriptor() protoreflect.EnumDescriptor {
	return file_autopilot_proto_enumTypes[1].Descriptor()
}

func (GpsIf_GgaData_FixQuality) Type() protoreflect.EnumType {
	return &file_autopilot_proto_enumTypes[1]
}

func (x GpsIf_GgaData_FixQuality) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use GpsIf_GgaData_FixQuality.Descriptor instead.
func (GpsIf_GgaData_FixQuality) EnumDescriptor() ([]byte, []int) {
	return file_autopilot_proto_rawDescGZIP(), []int{16, 1, 0}
}

type ObstacleIf_ZoneType int32

const (
	ObstacleIf_ZONE_KEEP_OUT ObstacleIf_ZoneType = 0
	ObstacleIf_ZONE_KEEP_IN  ObstacleIf_ZoneType = 1
)

// Enum value maps for ObstacleIf_ZoneType.
var (
	ObstacleIf_ZoneType_name = map[int32]string{
		0: "ZONE_KEEP_OUT",
		1: "ZONE_KEEP_IN",
	}
	ObstacleIf_ZoneType_value = map[string]int32{
		"ZONE_KEEP_OUT": 0,
		"ZONE_KEEP_IN":  1,
	}
)

func (x ObstacleIf_ZoneType) Enum() *ObstacleIf_ZoneType {
	p := new(ObstacleIf_ZoneType)
	*p = x
	return p
}

func (x ObstacleIf_ZoneType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (ObstacleIf_ZoneType) Descriptor() protoreflect.EnumDescriptor {
	return file_autopilot_proto_enumTypes[2].Descriptor()
}

func (ObstacleIf_ZoneType) Type() protoreflect.EnumType {
	return &file_autopilot_proto_enumTypes[2]
}

func (x ObstacleIf_ZoneType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use ObstacleIf_ZoneType.Descriptor instead.
func (ObstacleIf_ZoneType) EnumDescriptor() ([]byte, []int) {
	return file_autopilot_proto_rawDescGZIP(), []int{17, 0}
}

type VehicleStateIf_Mode int32

const (
	VehicleStateIf_VS_STANDBY                    VehicleStateIf_Mode = 0
	VehicleStateIf_VS_MANUAL                     VehicleStateIf_Mode = 1
	VehicleStateIf_VS_HEALTHY_MISSION            VehicleStateIf_Mode = 2
	VehicleStateIf_VS_UNHEALTHY_MISSION          VehicleStateIf_Mode = 3
	VehicleStateIf_VS_LOITER                     VehicleStateIf_Mode = 4
	VehicleStateIf_VS_MISSION_PLANNING           VehicleStateIf_Mode = 5
	VehicleStateIf_VS_UNHEALTHY_MISSION_PLANNING VehicleStateIf_Mode = 6
)

// Enum value maps for VehicleStateIf_Mode.
var (
	VehicleStateIf_Mode_name = map[int32]string{
		0: "VS_STANDBY",
		1: "VS_MANUAL",
		2: "VS_HEALTHY_MISSION",
		3: "VS_UNHEALTHY_MISSION",
		4: "VS_LOITER",
		5: "VS_MISSION_PLANNING",
		6: "VS_UNHEALTHY_MISSION_PLANNING",
	}
	VehicleStateIf_Mode_value = map[string]int32{
		"VS_STANDBY":                    0,
		"VS_MANUAL":                     1,
		"VS_HEALTHY_MISSION":            2,
		"VS_UNHEALTHY_MISSION":          3,
		"VS_LOITER":                     4,
		"VS_MISSION_PLANNING":           5,
		"VS_UNHEALTHY_MISSION_PLANNING": 6,
	}
)

func (x VehicleStateIf_Mode) Enum() *VehicleStateIf_Mode {
	p := new(VehicleStateIf_Mode)
	*p = x
	return p
}

func (x VehicleStateIf_Mode) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (VehicleStateIf_Mode) Descriptor() protoreflect.EnumDescriptor {
	return file_autopilot_proto_enumTypes[3].Descriptor()
}

func (VehicleStateIf_Mode) Type() protoreflect.EnumType {
	return &file_autopilot_proto_enumTypes[3]
}

func (x VehicleStateIf_Mode) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use VehicleStateIf_Mode.Descriptor instead.
func (VehicleStateIf_Mode) EnumDescriptor() ([]byte, []int) {
	return file_autopilot_proto_rawDescGZIP(), []int{20, 0}
}

type VehicleStateIf_FaultResponseType int32

const (
	VehicleStateIf_FR_IGNORE    VehicleStateIf_FaultResponseType = 0
	VehicleStateIf_FR_HALT      VehicleStateIf_FaultResponseType = 1
	VehicleStateIf_FR_LOITER    VehicleStateIf_FaultResponseType = 2
	VehicleStateIf_FR_GO_RALLY  VehicleStateIf_FaultResponseType = 3
	VehicleStateIf_FR_GO_FIRST  VehicleStateIf_FaultResponseType = 4
	VehicleStateIf_FR_GO_LAST   VehicleStateIf_FaultResponseType = 5
	VehicleStateIf_FR_GO_LAUNCH VehicleStateIf_FaultResponseType = 6
	VehicleStateIf_FR_CUSTOM    VehicleStateIf_FaultResponseType = 7
)

// Enum value maps for VehicleStateIf_FaultResponseType.
var (
	VehicleStateIf_FaultResponseType_name = map[int32]string{
		0: "FR_IGNORE",
		1: "FR_HALT",
		2: "FR_LOITER",
		3: "FR_GO_RALLY",
		4: "FR_GO_FIRST",
		5: "FR_GO_LAST",
		6: "FR_GO_LAUNCH",
		7: "FR_CUSTOM",
	}
	VehicleStateIf_FaultResponseType_value = map[string]int32{
		"FR_IGNORE":    0,
		"FR_HALT":      1,
		"FR_LOITER":    2,
		"FR_GO_RALLY":  3,
		"FR_GO_FIRST":  4,
		"FR_GO_LAST":   5,
		"FR_GO_LAUNCH": 6,
		"FR_CUSTOM":    7,
	}
)

func (x VehicleStateIf_FaultResponseType) Enum() *VehicleStateIf_FaultResponseType {
	p := new(VehicleStateIf_FaultResponseType)
	*p = x
	return p
}

func (x VehicleStateIf_FaultResponseType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (VehicleStateIf_FaultResponseType) Descriptor() protoreflect.EnumDescriptor {
	return file_autopilot_proto_enumTypes[4].Descriptor()
}

func (VehicleStateIf_FaultResponseType) Type() protoreflect.EnumType {
	return &file_autopilot_proto_enumTypes[4]
}

func (x VehicleStateIf_FaultResponseType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use VehicleStateIf_FaultResponseType.Descriptor instead.
func (VehicleStateIf_FaultResponseType) EnumDescriptor() ([]byte, []int) {
	return file_autopilot_proto_rawDescGZIP(), []int{20, 1}
}

type Position struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	LatitudeDeg   float64                `protobuf:"fixed64,1,opt,name=latitude_deg,json=latitudeDeg,proto3" json:"latitude_deg,omitempty"`
	LongitudeDeg  float64                `protobuf:"fixed64,2,opt,name=longitude_deg,json=longitudeDeg,proto3" json:"longitude_deg,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *Position) Reset() {
	*x = Position{}
	mi := &file_autopilot_proto_msgTypes[0]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Position) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Position) ProtoMessage() {}

func (x *Position) ProtoReflect() protoreflect.Message {
	mi := &file_autopilot_proto_msgTypes[0]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Position.ProtoReflect.Descriptor instead.
func (*Position) Descriptor() ([]byte, []int) {
	return file_autopilot_proto_rawDescGZIP(), []int{0}
}

func (x *Position) GetLatitudeDeg() float64 {
	if x != nil {
		return x.LatitudeDeg
	}
	return 0
}

func (x *Position) GetLongitudeDeg() float64 {
	if x != nil {
		return x.LongitudeDeg
	}
	return 0
}

type AngularRate struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	XDps          float64                `protobuf:"fixed64,1,opt,name=x_dps,json=xDps,proto3" json:"x_dps,omitempty"`
	YDps          float64                `protobuf:"fixed64,2,opt,name=y_dps,json=yDps,proto3" json:"y_dps,omitempty"`
	ZDps          float64                `protobuf:"fixed64,3,opt,name=z_dps,json=zDps,proto3" json:"z_dps,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *AngularRate) Reset() {
	*x = AngularRate{}
	mi := &file_autopilot_proto_msgTypes[1]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *AngularRate) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AngularRate) ProtoMessage() {}

func (x *AngularRate) ProtoReflect() protoreflect.Message {
	mi := &file_autopilot_proto_msgTypes[1]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AngularRate.ProtoReflect.Descriptor instead.
func (*AngularRate) Descriptor() ([]byte, []int) {
	return file_autopilot_proto_rawDescGZIP(), []int{1}
}

func (x *AngularRate) GetXDps() float64 {
	if x != nil {
		return x.XDps
	}
	return 0
}

func (x *AngularRate) GetYDps() float64 {
	if x != nil {
		return x.YDps
	}
	return 0
}

func (x *AngularRate) GetZDps() float64 {
	if x != nil {
		return x.ZDps
	}
	return 0
}

type Acceleration struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	XMps2         float64                `protobuf:"fixed64,1,opt,name=x_mps2,json=xMps2,proto3" json:"x_mps2,omitempty"`
	YMps2         float64                `protobuf:"fixed64,2,opt,name=y_mps2,json=yMps2,proto3" json:"y_mps2,omitempty"`
	ZMps2         float64                `protobuf:"fixed64,3,opt,name=z_mps2,json=zMps2,proto3" json:"z_mps2,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *Acceleration) Reset() {
	*x = Acceleration{}
	mi := &file_autopilot_proto_msgTypes[2]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Acceleration) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Acceleration) ProtoMessage() {}

func (x *Acceleration) ProtoReflect() protoreflect.Message {
	mi := &file_autopilot_proto_msgTypes[2]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Acceleration.ProtoReflect.Descriptor instead.
func (*Acceleration) Descriptor() ([]byte, []int) {
	return file_autopilot_proto_rawDescGZIP(), []int{2}
}

func (x *Acceleration) GetXMps2() float64 {
	if x != nil {
		return x.XMps2
	}
	return 0
}

func (x *Acceleration) GetYMps2() float64 {
	if x != nil {
		return x.YMps2
	}
	return 0
}

func (x *Acceleration) GetZMps2() float64 {
	if x != nil {
		return x.ZMps2
	}
	return 0
}

type MagneticField struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	XGauss        float64                `protobuf:"fixed64,1,opt,name=x_gauss,json=xGauss,proto3" json:"x_gauss,omitempty"`
	YGauss        float64                `protobuf:"fixed64,2,opt,name=y_gauss,json=yGauss,proto3" json:"y_gauss,omitempty"`
	ZGauss        float64                `protobuf:"fixed64,3,opt,name=z_gauss,json=zGauss,proto3" json:"z_gauss,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *MagneticField) Reset() {
	*x = MagneticField{}
	mi := &file_autopilot_proto_msgTypes[3]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *MagneticField) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MagneticField) ProtoMessage() {}

func (x *MagneticField) ProtoReflect() protoreflect.Message {
	mi := &file_autopilot_proto_msgTypes[3]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MagneticField.ProtoReflect.Descriptor instead.
func (*MagneticField) Descriptor() ([]byte, []int) {
	return file_autopilot_proto_rawDescGZIP(), []int{3}
}

func (x *MagneticField) GetXGauss() float64 {
	if x != nil {
		return x.XGauss
	}
	return 0
}

func (x *MagneticField) GetYGauss() float64 {
	if x != nil {
		return x.YGauss
	}
	return 0
}

func (x *MagneticField) GetZGauss() float64 {
	if x != nil {
		return x.ZGauss
	}
	return 0
}

type Euler struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	RollDeg       float64                `protobuf:"fixed64,1,opt,name=roll_deg,json=rollDeg,proto3" json:"roll_deg,omitempty"`
	PitchDeg      float64                `protobuf:"fixed64,2,opt,name=pitch_deg,json=pitchDeg,proto3" json:"pitch_deg,omitempty"`
	HeadingDeg    float64                `protobuf:"fixed64,3,opt,name=heading_deg,json=headingDeg,proto3" json:"heading_deg,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *Euler) Reset() {
	*x = Euler{}
	mi := &file_autopilot_proto_msgTypes[4]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Euler) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Euler) ProtoMessage() {}

func (x *Euler) ProtoReflect() protoreflect.Message {
	mi := &file_autopilot_proto_msgTypes[4]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Euler.ProtoReflect.Descriptor instead.
func (*Euler) Descriptor() ([]byte, []int) {
	return file_autopilot_proto_rawDescGZIP(), []int{4}
}

func (x *Euler) GetRollDeg() float64 {
	if x != nil {
		return x.RollDeg
	}
	return 0
}

func (x *Euler) GetPitchDeg() float64 {
	if x != nil {
		return x.PitchDeg
	}
	return 0
}

func (x *Euler) GetHeadingDeg() float64 {
	if x != nil {
		return x.HeadingDeg
	}
	return 0
}

type BodyVelocity struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	XMps          float64                `protobuf:"fixed64,1,opt,name=x_mps,json=xMps,proto3" json:"x_mps,omitempty"`
	YMps          float64                `protobuf:"fixed64,2,opt,name=y_mps,json=yMps,proto3" json:"y_mps,omitempty"`
	ZMps          float64                `protobuf:"fixed64,3,opt,name=z_mps,json=zMps,proto3" json:"z_mps,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *BodyVelocity) Reset() {
	*x = BodyVelocity{}
	mi := &file_autopilot_proto_msgTypes[5]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *BodyVelocity) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BodyVelocity) ProtoMessage() {}

func (x *BodyVelocity) ProtoReflect() protoreflect.Message {
	mi := &file_autopilot_proto_msgTypes[5]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BodyVelocity.ProtoReflect.Descriptor instead.
func (*BodyVelocity) Descriptor() ([]byte, []int) {
	return file_autopilot_proto_rawDescGZIP(), []int{5}
}

func (x *BodyVelocity) GetXMps() float64 {
	if x != nil {
		return x.XMps
	}
	return 0
}

func (x *BodyVelocity) GetYMps() float64 {
	if x != nil {
		return x.YMps
	}
	return 0
}

func (x *BodyVelocity) GetZMps() float64 {
	if x != nil {
		return x.ZMps
	}
	return 0
}

type InertialVelocity struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	NorthMps      float64                `protobuf:"fixed64,1,opt,name=north_mps,json=northMps,proto3" json:"north_mps,omitempty"`
	EastMps       float64                `protobuf:"fixed64,2,opt,name=east_mps,json=eastMps,proto3" json:"east_mps,omitempty"`
	DownMps       float64                `protobuf:"fixed64,3,opt,name=down_mps,json=downMps,proto3" json:"down_mps,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *InertialVelocity) Reset() {
	*x = InertialVelocity{}
	mi := &file_autopilot_proto_msgTypes[6]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *InertialVelocity) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*InertialVelocity) ProtoMessage() {}

func (x *InertialVelocity) ProtoReflect() protoreflect.Message {
	mi := &file_autopilot_proto_msgTypes[6]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use InertialVelocity.ProtoReflect.Descriptor instead.
func (*InertialVelocity) Descriptor() ([]byte, []int) {
	return file_autopilot_proto_rawDescGZIP(), []int{6}
}

func (x *InertialVelocity) GetNorthMps() float64 {
	if x != nil {
		return x.NorthMps
	}
	return 0
}

func (x *InertialVelocity) GetEastMps() float64 {
	if x != nil {
		return x.EastMps
	}
	return 0
}

func (x *InertialVelocity) GetDownMps() float64 {
	if x != nil {
		return x.DownMps
	}
	return 0
}

type WaterCurrent struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	SpeedMps      float64                `protobuf:"fixed64,1,opt,name=speed_mps,json=speedMps,proto3" json:"speed_mps,omitempty"`
	DirectionDeg  float64                `protobuf:"fixed64,2,opt,name=direction_deg,json=directionDeg,proto3" json:"direction_deg,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *WaterCurrent) Reset() {
	*x = WaterCurrent{}
	mi := &file_autopilot_proto_msgTypes[7]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *WaterCurrent) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*WaterCurrent) ProtoMessage() {}

func (x *WaterCurrent) ProtoReflect() protoreflect.Message {
	mi := &file_autopilot_proto_msgTypes[7]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use WaterCurrent.ProtoReflect.Descriptor instead.
func (*WaterCurrent) Descriptor() ([]byte, []int) {
	return file_autopilot_proto_rawDescGZIP(), []int{7}
}

func (x *WaterCurrent) GetSpeedMps() float64 {
	if x != nil {
		return x.SpeedMps
	}
	return 0
}

func (x *WaterCurrent) GetDirectionDeg() float64 {
	if x != nil {
		return x.DirectionDeg
	}
	return 0
}

type FuelGauge struct {
	state                protoimpl.MessageState `protogen:"open.v1"`
	Voltage_V            float64                `protobuf:"fixed64,1,opt,name=voltage_V,json=voltageV,proto3" json:"voltage_V,omitempty"`
	Current_A            float64                `protobuf:"fixed64,2,opt,name=current_A,json=currentA,proto3" json:"current_A,omitempty"`
	StateOfChargePercent float64                `protobuf:"fixed64,3,opt,name=state_of_charge_percent,json=stateOfChargePercent,proto3" json:"state_of_charge_percent,omitempty"`
	unknownFields        protoimpl.UnknownFields
	sizeCache            protoimpl.SizeCache
}

func (x *FuelGauge) Reset() {
	*x = FuelGauge{}
	mi := &file_autopilot_proto_msgTypes[8]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *FuelGauge) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FuelGauge) ProtoMessage() {}

func (x *FuelGauge) ProtoReflect() protoreflect.Message {
	mi := &file_autopilot_proto_msgTypes[8]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FuelGauge.ProtoReflect.Descriptor instead.
func (*FuelGauge) Descriptor() ([]byte, []int) {
	return file_autopilot_proto_rawDescGZIP(), []int{8}
}

func (x *FuelGauge) GetVoltage_V() float64 {
	if x != nil {
		return x.Voltage_V
	}
	return 0
}

func (x *FuelGauge) GetCurrent_A() float64 {
	if x != nil {
		return x.Current_A
	}
	return 0
}

func (x *FuelGauge) GetStateOfChargePercent() float64 {
	if x != nil {
		return x.StateOfChargePercent
	}
	return 0
}

type VehicleData struct {
	state                          protoimpl.MessageState `protogen:"open.v1"`
	Position                       *Position              `protobuf:"bytes,1,opt,name=position,proto3,oneof" json:"position,omitempty"`
	PositionSource                 VehicleData_DataSource `protobuf:"varint,2,opt,name=position_source,json=positionSource,proto3,enum=magothy.protobuf.autopilot.VehicleData_DataSource" json:"position_source,omitempty"`
	PositionTtagNsSteady           uint64                 `protobuf:"varint,3,opt,name=position_ttag_ns_steady,json=positionTtagNsSteady,proto3" json:"position_ttag_ns_steady,omitempty"`
	Attitude                       *Euler                 `protobuf:"bytes,4,opt,name=attitude,proto3,oneof" json:"attitude,omitempty"`
	AttitudeSource                 VehicleData_DataSource `protobuf:"varint,5,opt,name=attitude_source,json=attitudeSource,proto3,enum=magothy.protobuf.autopilot.VehicleData_DataSource" json:"attitude_source,omitempty"`
	AttitudeTtagNsSteady           uint64                 `protobuf:"varint,6,opt,name=attitude_ttag_ns_steady,json=attitudeTtagNsSteady,proto3" json:"attitude_ttag_ns_steady,omitempty"`
	AngularRate                    *AngularRate           `protobuf:"bytes,7,opt,name=angular_rate,json=angularRate,proto3,oneof" json:"angular_rate,omitempty"`
	AngularRateSource              VehicleData_DataSource `protobuf:"varint,8,opt,name=angular_rate_source,json=angularRateSource,proto3,enum=magothy.protobuf.autopilot.VehicleData_DataSource" json:"angular_rate_source,omitempty"`
	AngularRateTtagNsSteady        uint64                 `protobuf:"varint,9,opt,name=angular_rate_ttag_ns_steady,json=angularRateTtagNsSteady,proto3" json:"angular_rate_ttag_ns_steady,omitempty"`
	Acceleration                   *Acceleration          `protobuf:"bytes,10,opt,name=acceleration,proto3,oneof" json:"acceleration,omitempty"`
	AccelerationSource             VehicleData_DataSource `protobuf:"varint,11,opt,name=acceleration_source,json=accelerationSource,proto3,enum=magothy.protobuf.autopilot.VehicleData_DataSource" json:"acceleration_source,omitempty"`
	AccelerationTtagNsSteady       uint64                 `protobuf:"varint,12,opt,name=acceleration_ttag_ns_steady,json=accelerationTtagNsSteady,proto3" json:"acceleration_ttag_ns_steady,omitempty"`
	MagneticField                  *MagneticField         `protobuf:"bytes,13,opt,name=magnetic_field,json=magneticField,proto3,oneof" json:"magnetic_field,omitempty"`
	MagneticFieldSource            VehicleData_DataSource `protobuf:"varint,14,opt,name=magnetic_field_source,json=magneticFieldSource,proto3,enum=magothy.protobuf.autopilot.VehicleData_DataSource" json:"magnetic_field_source,omitempty"`
	MagneticFieldTtagNsSteady      uint64                 `protobuf:"varint,15,opt,name=magnetic_field_ttag_ns_steady,json=magneticFieldTtagNsSteady,proto3" json:"magnetic_field_ttag_ns_steady,omitempty"`
	DepthM                         *float64               `protobuf:"fixed64,16,opt,name=depth_m,json=depthM,proto3,oneof" json:"depth_m,omitempty"`
	DepthSource                    VehicleData_DataSource `protobuf:"varint,17,opt,name=depth_source,json=depthSource,proto3,enum=magothy.protobuf.autopilot.VehicleData_DataSource" json:"depth_source,omitempty"`
	DepthTtagNsSteady              uint64                 `protobuf:"varint,18,opt,name=depth_ttag_ns_steady,json=depthTtagNsSteady,proto3" json:"depth_ttag_ns_steady,omitempty"`
	AltitudeM                      *float64               `protobuf:"fixed64,19,opt,name=altitude_m,json=altitudeM,proto3,oneof" json:"altitude_m,omitempty"`
	AltitudeSource                 VehicleData_DataSource `protobuf:"varint,20,opt,name=altitude_source,json=altitudeSource,proto3,enum=magothy.protobuf.autopilot.VehicleData_DataSource" json:"altitude_source,omitempty"`
	AltitudeTtagNsSteady           uint64                 `protobuf:"varint,21,opt,name=altitude_ttag_ns_steady,json=altitudeTtagNsSteady,proto3" json:"altitude_ttag_ns_steady,omitempty"`
	SpeedMps                       *float64               `protobuf:"fixed64,22,opt,name=speed_mps,json=speedMps,proto3,oneof" json:"speed_mps,omitempty"`
	SpeedSource                    VehicleData_DataSource `protobuf:"varint,23,opt,name=speed_source,json=speedSource,proto3,enum=magothy.protobuf.autopilot.VehicleData_DataSource" json:"speed_source,omitempty"`
	SpeedTtagNsSteady              uint64                 `protobuf:"varint,24,opt,name=speed_ttag_ns_steady,json=speedTtagNsSteady,proto3" json:"speed_ttag_ns_steady,omitempty"`
	CourseDeg                      *float64               `protobuf:"fixed64,25,opt,name=course_deg,json=courseDeg,proto3,oneof" json:"course_deg,omitempty"`
	CourseSource                   VehicleData_DataSource `protobuf:"varint,26,opt,name=course_source,json=courseSource,proto3,enum=magothy.protobuf.autopilot.VehicleData_DataSource" json:"course_source,omitempty"`
	CourseTtagNsSteady             uint64                 `protobuf:"varint,27,opt,name=course_ttag_ns_steady,json=courseTtagNsSteady,proto3" json:"course_ttag_ns_steady,omitempty"`
	BodyVelocity                   *BodyVelocity          `protobuf:"bytes,28,opt,name=body_velocity,json=bodyVelocity,proto3,oneof" json:"body_velocity,omitempty"`
	BodyVelocitySource             VehicleData_DataSource `protobuf:"varint,29,opt,name=body_velocity_source,json=bodyVelocitySource,proto3,enum=magothy.protobuf.autopilot.VehicleData_DataSource" json:"body_velocity_source,omitempty"`
	BodyVelocityTtagNsSteady       uint64                 `protobuf:"varint,30,opt,name=body_velocity_ttag_ns_steady,json=bodyVelocityTtagNsSteady,proto3" json:"body_velocity_ttag_ns_steady,omitempty"`
	WaterCurrent                   *WaterCurrent          `protobuf:"bytes,31,opt,name=water_current,json=waterCurrent,proto3,oneof" json:"water_current,omitempty"`
	WaterCurrentSource             VehicleData_DataSource `protobuf:"varint,32,opt,name=water_current_source,json=waterCurrentSource,proto3,enum=magothy.protobuf.autopilot.VehicleData_DataSource" json:"water_current_source,omitempty"`
	WaterCurrentTtagNsSteady       uint64                 `protobuf:"varint,33,opt,name=water_current_ttag_ns_steady,json=waterCurrentTtagNsSteady,proto3" json:"water_current_ttag_ns_steady,omitempty"`
	WaterRelativeSpeedMps          *float64               `protobuf:"fixed64,34,opt,name=water_relative_speed_mps,json=waterRelativeSpeedMps,proto3,oneof" json:"water_relative_speed_mps,omitempty"`
	WaterRelativeSpeedSource       VehicleData_DataSource `protobuf:"varint,35,opt,name=water_relative_speed_source,json=waterRelativeSpeedSource,proto3,enum=magothy.protobuf.autopilot.VehicleData_DataSource" json:"water_relative_speed_source,omitempty"`
	WaterRelativeSpeedTtagNsSteady uint64                 `protobuf:"varint,36,opt,name=water_relative_speed_ttag_ns_steady,json=waterRelativeSpeedTtagNsSteady,proto3" json:"water_relative_speed_ttag_ns_steady,omitempty"`
	FuelGauge                      *FuelGauge             `protobuf:"bytes,37,opt,name=fuel_gauge,json=fuelGauge,proto3,oneof" json:"fuel_gauge,omitempty"`
	FuelGaugeSource                VehicleData_DataSource `protobuf:"varint,38,opt,name=fuel_gauge_source,json=fuelGaugeSource,proto3,enum=magothy.protobuf.autopilot.VehicleData_DataSource" json:"fuel_gauge_source,omitempty"`
	FuelGaugeTtagNsSteady          uint64                 `protobuf:"varint,39,opt,name=fuel_gauge_ttag_ns_steady,json=fuelGaugeTtagNsSteady,proto3" json:"fuel_gauge_ttag_ns_steady,omitempty"`
	unknownFields                  protoimpl.UnknownFields
	sizeCache                      protoimpl.SizeCache
}

func (x *VehicleData) Reset() {
	*x = VehicleData{}
	mi := &file_autopilot_proto_msgTypes[9]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *VehicleData) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*VehicleData) ProtoMessage() {}

func (x *VehicleData) ProtoReflect() protoreflect.Message {
	mi := &file_autopilot_proto_msgTypes[9]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use VehicleData.ProtoReflect.Descriptor instead.
func (*VehicleData) Descriptor() ([]byte, []int) {
	return file_autopilot_proto_rawDescGZIP(), []int{9}
}

func (x *VehicleData) GetPosition() *Position {
	if x != nil {
		return x.Position
	}
	return nil
}

func (x *VehicleData) GetPositionSource() VehicleData_DataSource {
	if x != nil {
		return x.PositionSource
	}
	return VehicleData_DS_NODATA
}

func (x *VehicleData) GetPositionTtagNsSteady() uint64 {
	if x != nil {
		return x.PositionTtagNsSteady
	}
	return 0
}

func (x *VehicleData) GetAttitude() *Euler {
	if x != nil {
		return x.Attitude
	}
	return nil
}

func (x *VehicleData) GetAttitudeSource() VehicleData_DataSource {
	if x != nil {
		return x.AttitudeSource
	}
	return VehicleData_DS_NODATA
}

func (x *VehicleData) GetAttitudeTtagNsSteady() uint64 {
	if x != nil {
		return x.AttitudeTtagNsSteady
	}
	return 0
}

func (x *VehicleData) GetAngularRate() *AngularRate {
	if x != nil {
		return x.AngularRate
	}
	return nil
}

func (x *VehicleData) GetAngularRateSource() VehicleData_DataSource {
	if x != nil {
		return x.AngularRateSource
	}
	return VehicleData_DS_NODATA
}

func (x *VehicleData) GetAngularRateTtagNsSteady() uint64 {
	if x != nil {
		return x.AngularRateTtagNsSteady
	}
	return 0
}

func (x *VehicleData) GetAcceleration() *Acceleration {
	if x != nil {
		return x.Acceleration
	}
	return nil
}

func (x *VehicleData) GetAccelerationSource() VehicleData_DataSource {
	if x != nil {
		return x.AccelerationSource
	}
	return VehicleData_DS_NODATA
}

func (x *VehicleData) GetAccelerationTtagNsSteady() uint64 {
	if x != nil {
		return x.AccelerationTtagNsSteady
	}
	return 0
}

func (x *VehicleData) GetMagneticField() *MagneticField {
	if x != nil {
		return x.MagneticField
	}
	return nil
}

func (x *VehicleData) GetMagneticFieldSource() VehicleData_DataSource {
	if x != nil {
		return x.MagneticFieldSource
	}
	return VehicleData_DS_NODATA
}

func (x *VehicleData) GetMagneticFieldTtagNsSteady() uint64 {
	if x != nil {
		return x.MagneticFieldTtagNsSteady
	}
	return 0
}

func (x *VehicleData) GetDepthM() float64 {
	if x != nil && x.DepthM != nil {
		return *x.DepthM
	}
	return 0
}

func (x *VehicleData) GetDepthSource() VehicleData_DataSource {
	if x != nil {
		return x.DepthSource
	}
	return VehicleData_DS_NODATA
}

func (x *VehicleData) GetDepthTtagNsSteady() uint64 {
	if x != nil {
		return x.DepthTtagNsSteady
	}
	return 0
}

func (x *VehicleData) GetAltitudeM() float64 {
	if x != nil && x.AltitudeM != nil {
		return *x.AltitudeM
	}
	return 0
}

func (x *VehicleData) GetAltitudeSource() VehicleData_DataSource {
	if x != nil {
		return x.AltitudeSource
	}
	return VehicleData_DS_NODATA
}

func (x *VehicleData) GetAltitudeTtagNsSteady() uint64 {
	if x != nil {
		return x.AltitudeTtagNsSteady
	}
	return 0
}

func (x *VehicleData) GetSpeedMps() float64 {
	if x != nil && x.SpeedMps != nil {
		return *x.SpeedMps
	}
	return 0
}

func (x *VehicleData) GetSpeedSource() VehicleData_DataSource {
	if x != nil {
		return x.SpeedSource
	}
	return VehicleData_DS_NODATA
}

func (x *VehicleData) GetSpeedTtagNsSteady() uint64 {
	if x != nil {
		return x.SpeedTtagNsSteady
	}
	return 0
}

func (x *VehicleData) GetCourseDeg() float64 {
	if x != nil && x.CourseDeg != nil {
		return *x.CourseDeg
	}
	return 0
}

func (x *VehicleData) GetCourseSource() VehicleData_DataSource {
	if x != nil {
		return x.CourseSource
	}
	return VehicleData_DS_NODATA
}

func (x *VehicleData) GetCourseTtagNsSteady() uint64 {
	if x != nil {
		return x.CourseTtagNsSteady
	}
	return 0
}

func (x *VehicleData) GetBodyVelocity() *BodyVelocity {
	if x != nil {
		return x.BodyVelocity
	}
	return nil
}

func (x *VehicleData) GetBodyVelocitySource() VehicleData_DataSource {
	if x != nil {
		return x.BodyVelocitySource
	}
	return VehicleData_DS_NODATA
}

func (x *VehicleData) GetBodyVelocityTtagNsSteady() uint64 {
	if x != nil {
		return x.BodyVelocityTtagNsSteady
	}
	return 0
}

func (x *VehicleData) GetWaterCurrent() *WaterCurrent {
	if x != nil {
		return x.WaterCurrent
	}
	return nil
}

func (x *VehicleData) GetWaterCurrentSource() VehicleData_DataSource {
	if x != nil {
		return x.WaterCurrentSource
	}
	return VehicleData_DS_NODATA
}

func (x *VehicleData) GetWaterCurrentTtagNsSteady() uint64 {
	if x != nil {
		return x.WaterCurrentTtagNsSteady
	}
	return 0
}

func (x *VehicleData) GetWaterRelativeSpeedMps() float64 {
	if x != nil && x.WaterRelativeSpeedMps != nil {
		return *x.WaterRelativeSpeedMps
	}
	return 0
}

func (x *VehicleData) GetWaterRelativeSpeedSource() VehicleData_DataSource {
	if x != nil {
		return x.WaterRelativeSpeedSource
	}
	return VehicleData_DS_NODATA
}

func (x *VehicleData) GetWaterRelativeSpeedTtagNsSteady() uint64 {
	if x != nil {
		return x.WaterRelativeSpeedTtagNsSteady
	}
	return 0
}

func (x *VehicleData) GetFuelGauge() *FuelGauge {
	if x != nil {
		return x.FuelGauge
	}
	return nil
}

func (x *VehicleData) GetFuelGaugeSource() VehicleData_DataSource {
	if x != nil {
		return x.FuelGaugeSource
	}
	return VehicleData_DS_NODATA
}

func (x *VehicleData) GetFuelGaugeTtagNsSteady() uint64 {
	if x != nil {
		return x.FuelGaugeTtagNsSteady
	}
	return 0
}

type AhrsIf struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	AngularRate   *AngularRate           `protobuf:"bytes,1,opt,name=angular_rate,json=angularRate,proto3,oneof" json:"angular_rate,omitempty"`
	Acceleration  *Acceleration          `protobuf:"bytes,2,opt,name=acceleration,proto3,oneof" json:"acceleration,omitempty"`
	Magfield      *MagneticField         `protobuf:"bytes,3,opt,name=magfield,proto3,oneof" json:"magfield,omitempty"`
	Euler         *Euler                 `protobuf:"bytes,4,opt,name=euler,proto3,oneof" json:"euler,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *AhrsIf) Reset() {
	*x = AhrsIf{}
	mi := &file_autopilot_proto_msgTypes[10]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *AhrsIf) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AhrsIf) ProtoMessage() {}

func (x *AhrsIf) ProtoReflect() protoreflect.Message {
	mi := &file_autopilot_proto_msgTypes[10]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AhrsIf.ProtoReflect.Descriptor instead.
func (*AhrsIf) Descriptor() ([]byte, []int) {
	return file_autopilot_proto_rawDescGZIP(), []int{10}
}

func (x *AhrsIf) GetAngularRate() *AngularRate {
	if x != nil {
		return x.AngularRate
	}
	return nil
}

func (x *AhrsIf) GetAcceleration() *Acceleration {
	if x != nil {
		return x.Acceleration
	}
	return nil
}

func (x *AhrsIf) GetMagfield() *MagneticField {
	if x != nil {
		return x.Magfield
	}
	return nil
}

func (x *AhrsIf) GetEuler() *Euler {
	if x != nil {
		return x.Euler
	}
	return nil
}

type AltitudeIf struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	AltitudeM     *float64               `protobuf:"fixed64,1,opt,name=altitude_m,json=altitudeM,proto3,oneof" json:"altitude_m,omitempty"` // use NaN to represent unset
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *AltitudeIf) Reset() {
	*x = AltitudeIf{}
	mi := &file_autopilot_proto_msgTypes[11]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *AltitudeIf) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AltitudeIf) ProtoMessage() {}

func (x *AltitudeIf) ProtoReflect() protoreflect.Message {
	mi := &file_autopilot_proto_msgTypes[11]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AltitudeIf.ProtoReflect.Descriptor instead.
func (*AltitudeIf) Descriptor() ([]byte, []int) {
	return file_autopilot_proto_rawDescGZIP(), []int{11}
}

func (x *AltitudeIf) GetAltitudeM() float64 {
	if x != nil && x.AltitudeM != nil {
		return *x.AltitudeM
	}
	return 0
}

type BatteryIf struct {
	state                protoimpl.MessageState `protogen:"open.v1"`
	Voltage_V            *float64               `protobuf:"fixed64,1,opt,name=voltage_V,json=voltageV,proto3,oneof" json:"voltage_V,omitempty"`                                        // use NaN to represent unset
	Current_A            *float64               `protobuf:"fixed64,2,opt,name=current_A,json=currentA,proto3,oneof" json:"current_A,omitempty"`                                        // use NaN to represent unset
	StateOfChargePercent *int32                 `protobuf:"varint,3,opt,name=state_of_charge_percent,json=stateOfChargePercent,proto3,oneof" json:"state_of_charge_percent,omitempty"` // use < 0 to represent unset
	unknownFields        protoimpl.UnknownFields
	sizeCache            protoimpl.SizeCache
}

func (x *BatteryIf) Reset() {
	*x = BatteryIf{}
	mi := &file_autopilot_proto_msgTypes[12]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *BatteryIf) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BatteryIf) ProtoMessage() {}

func (x *BatteryIf) ProtoReflect() protoreflect.Message {
	mi := &file_autopilot_proto_msgTypes[12]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BatteryIf.ProtoReflect.Descriptor instead.
func (*BatteryIf) Descriptor() ([]byte, []int) {
	return file_autopilot_proto_rawDescGZIP(), []int{12}
}

func (x *BatteryIf) GetVoltage_V() float64 {
	if x != nil && x.Voltage_V != nil {
		return *x.Voltage_V
	}
	return 0
}

func (x *BatteryIf) GetCurrent_A() float64 {
	if x != nil && x.Current_A != nil {
		return *x.Current_A
	}
	return 0
}

func (x *BatteryIf) GetStateOfChargePercent() int32 {
	if x != nil && x.StateOfChargePercent != nil {
		return *x.StateOfChargePercent
	}
	return 0
}

type DepthIf struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	DepthM        *float64               `protobuf:"fixed64,1,opt,name=depth_m,json=depthM,proto3,oneof" json:"depth_m,omitempty"` // use NaN to represent unset
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *DepthIf) Reset() {
	*x = DepthIf{}
	mi := &file_autopilot_proto_msgTypes[13]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *DepthIf) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DepthIf) ProtoMessage() {}

func (x *DepthIf) ProtoReflect() protoreflect.Message {
	mi := &file_autopilot_proto_msgTypes[13]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DepthIf.ProtoReflect.Descriptor instead.
func (*DepthIf) Descriptor() ([]byte, []int) {
	return file_autopilot_proto_rawDescGZIP(), []int{13}
}

func (x *DepthIf) GetDepthM() float64 {
	if x != nil && x.DepthM != nil {
		return *x.DepthM
	}
	return 0
}

type EffectorIf struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Command       []float64              `protobuf:"fixed64,1,rep,packed,name=command,proto3" json:"command,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *EffectorIf) Reset() {
	*x = EffectorIf{}
	mi := &file_autopilot_proto_msgTypes[14]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *EffectorIf) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EffectorIf) ProtoMessage() {}

func (x *EffectorIf) ProtoReflect() protoreflect.Message {
	mi := &file_autopilot_proto_msgTypes[14]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use EffectorIf.ProtoReflect.Descriptor instead.
func (*EffectorIf) Descriptor() ([]byte, []int) {
	return file_autopilot_proto_rawDescGZIP(), []int{14}
}

func (x *EffectorIf) GetCommand() []float64 {
	if x != nil {
		return x.Command
	}
	return nil
}

type InsIf struct {
	state            protoimpl.MessageState `protogen:"open.v1"`
	AngularRate      *AngularRate           `protobuf:"bytes,1,opt,name=angular_rate,json=angularRate,proto3,oneof" json:"angular_rate,omitempty"`
	Acceleration     *Acceleration          `protobuf:"bytes,2,opt,name=acceleration,proto3,oneof" json:"acceleration,omitempty"`
	Magfield         *MagneticField         `protobuf:"bytes,3,opt,name=magfield,proto3,oneof" json:"magfield,omitempty"`
	Euler            *Euler                 `protobuf:"bytes,4,opt,name=euler,proto3,oneof" json:"euler,omitempty"`
	BodyVelocity     *BodyVelocity          `protobuf:"bytes,5,opt,name=body_velocity,json=bodyVelocity,proto3,oneof" json:"body_velocity,omitempty"`
	Position         *Position              `protobuf:"bytes,6,opt,name=position,proto3,oneof" json:"position,omitempty"`
	InertialVelocity *InertialVelocity      `protobuf:"bytes,7,opt,name=inertial_velocity,json=inertialVelocity,proto3,oneof" json:"inertial_velocity,omitempty"`
	unknownFields    protoimpl.UnknownFields
	sizeCache        protoimpl.SizeCache
}

func (x *InsIf) Reset() {
	*x = InsIf{}
	mi := &file_autopilot_proto_msgTypes[15]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *InsIf) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*InsIf) ProtoMessage() {}

func (x *InsIf) ProtoReflect() protoreflect.Message {
	mi := &file_autopilot_proto_msgTypes[15]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use InsIf.ProtoReflect.Descriptor instead.
func (*InsIf) Descriptor() ([]byte, []int) {
	return file_autopilot_proto_rawDescGZIP(), []int{15}
}

func (x *InsIf) GetAngularRate() *AngularRate {
	if x != nil {
		return x.AngularRate
	}
	return nil
}

func (x *InsIf) GetAcceleration() *Acceleration {
	if x != nil {
		return x.Acceleration
	}
	return nil
}

func (x *InsIf) GetMagfield() *MagneticField {
	if x != nil {
		return x.Magfield
	}
	return nil
}

func (x *InsIf) GetEuler() *Euler {
	if x != nil {
		return x.Euler
	}
	return nil
}

func (x *InsIf) GetBodyVelocity() *BodyVelocity {
	if x != nil {
		return x.BodyVelocity
	}
	return nil
}

func (x *InsIf) GetPosition() *Position {
	if x != nil {
		return x.Position
	}
	return nil
}

func (x *InsIf) GetInertialVelocity() *InertialVelocity {
	if x != nil {
		return x.InertialVelocity
	}
	return nil
}

type GpsIf struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	RmcData       *GpsIf_RmcData         `protobuf:"bytes,1,opt,name=rmc_data,json=rmcData,proto3,oneof" json:"rmc_data,omitempty"`
	GgaData       *GpsIf_GgaData         `protobuf:"bytes,2,opt,name=gga_data,json=ggaData,proto3,oneof" json:"gga_data,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *GpsIf) Reset() {
	*x = GpsIf{}
	mi := &file_autopilot_proto_msgTypes[16]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GpsIf) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GpsIf) ProtoMessage() {}

func (x *GpsIf) ProtoReflect() protoreflect.Message {
	mi := &file_autopilot_proto_msgTypes[16]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GpsIf.ProtoReflect.Descriptor instead.
func (*GpsIf) Descriptor() ([]byte, []int) {
	return file_autopilot_proto_rawDescGZIP(), []int{16}
}

func (x *GpsIf) GetRmcData() *GpsIf_RmcData {
	if x != nil {
		return x.RmcData
	}
	return nil
}

func (x *GpsIf) GetGgaData() *GpsIf_GgaData {
	if x != nil {
		return x.GgaData
	}
	return nil
}

type ObstacleIf struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	Id    string                 `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	// Types that are valid to be assigned to ObstacleOneOf:
	//
	//	*ObstacleIf_Circle_
	//	*ObstacleIf_Polygon_
	ObstacleOneOf   isObstacleIf_ObstacleOneOf `protobuf_oneof:"ObstacleOneOf"`
	ZoneType        ObstacleIf_ZoneType        `protobuf:"varint,4,opt,name=zone_type,json=zoneType,proto3,enum=magothy.protobuf.autopilot.ObstacleIf_ZoneType" json:"zone_type,omitempty"`
	IsStationary    bool                       `protobuf:"varint,5,opt,name=is_stationary,json=isStationary,proto3" json:"is_stationary,omitempty"`
	LifespanS       float64                    `protobuf:"fixed64,6,opt,name=lifespan_s,json=lifespanS,proto3" json:"lifespan_s,omitempty"`
	CourseDeg       *float64                   `protobuf:"fixed64,7,opt,name=course_deg,json=courseDeg,proto3,oneof" json:"course_deg,omitempty"`
	SpeedMps        *float64                   `protobuf:"fixed64,8,opt,name=speed_mps,json=speedMps,proto3,oneof" json:"speed_mps,omitempty"`
	PointOfInterest *Position                  `protobuf:"bytes,9,opt,name=point_of_interest,json=pointOfInterest,proto3,oneof" json:"point_of_interest,omitempty"`
	unknownFields   protoimpl.UnknownFields
	sizeCache       protoimpl.SizeCache
}

func (x *ObstacleIf) Reset() {
	*x = ObstacleIf{}
	mi := &file_autopilot_proto_msgTypes[17]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ObstacleIf) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ObstacleIf) ProtoMessage() {}

func (x *ObstacleIf) ProtoReflect() protoreflect.Message {
	mi := &file_autopilot_proto_msgTypes[17]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ObstacleIf.ProtoReflect.Descriptor instead.
func (*ObstacleIf) Descriptor() ([]byte, []int) {
	return file_autopilot_proto_rawDescGZIP(), []int{17}
}

func (x *ObstacleIf) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *ObstacleIf) GetObstacleOneOf() isObstacleIf_ObstacleOneOf {
	if x != nil {
		return x.ObstacleOneOf
	}
	return nil
}

func (x *ObstacleIf) GetCircle() *ObstacleIf_Circle {
	if x != nil {
		if x, ok := x.ObstacleOneOf.(*ObstacleIf_Circle_); ok {
			return x.Circle
		}
	}
	return nil
}

func (x *ObstacleIf) GetPolygon() *ObstacleIf_Polygon {
	if x != nil {
		if x, ok := x.ObstacleOneOf.(*ObstacleIf_Polygon_); ok {
			return x.Polygon
		}
	}
	return nil
}

func (x *ObstacleIf) GetZoneType() ObstacleIf_ZoneType {
	if x != nil {
		return x.ZoneType
	}
	return ObstacleIf_ZONE_KEEP_OUT
}

func (x *ObstacleIf) GetIsStationary() bool {
	if x != nil {
		return x.IsStationary
	}
	return false
}

func (x *ObstacleIf) GetLifespanS() float64 {
	if x != nil {
		return x.LifespanS
	}
	return 0
}

func (x *ObstacleIf) GetCourseDeg() float64 {
	if x != nil && x.CourseDeg != nil {
		return *x.CourseDeg
	}
	return 0
}

func (x *ObstacleIf) GetSpeedMps() float64 {
	if x != nil && x.SpeedMps != nil {
		return *x.SpeedMps
	}
	return 0
}

func (x *ObstacleIf) GetPointOfInterest() *Position {
	if x != nil {
		return x.PointOfInterest
	}
	return nil
}

type isObstacleIf_ObstacleOneOf interface {
	isObstacleIf_ObstacleOneOf()
}

type ObstacleIf_Circle_ struct {
	Circle *ObstacleIf_Circle `protobuf:"bytes,2,opt,name=circle,proto3,oneof"`
}

type ObstacleIf_Polygon_ struct {
	Polygon *ObstacleIf_Polygon `protobuf:"bytes,3,opt,name=polygon,proto3,oneof"`
}

func (*ObstacleIf_Circle_) isObstacleIf_ObstacleOneOf() {}

func (*ObstacleIf_Polygon_) isObstacleIf_ObstacleOneOf() {}

type Obstacles struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	TtagSystem    *timestamppb.Timestamp `protobuf:"bytes,1,opt,name=ttag_system,json=ttagSystem,proto3" json:"ttag_system,omitempty"`
	TtagSteadyNs  uint64                 `protobuf:"varint,2,opt,name=ttag_steady_ns,json=ttagSteadyNs,proto3" json:"ttag_steady_ns,omitempty"`
	Obstacles     []*ObstacleIf          `protobuf:"bytes,3,rep,name=obstacles,proto3" json:"obstacles,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *Obstacles) Reset() {
	*x = Obstacles{}
	mi := &file_autopilot_proto_msgTypes[18]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Obstacles) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Obstacles) ProtoMessage() {}

func (x *Obstacles) ProtoReflect() protoreflect.Message {
	mi := &file_autopilot_proto_msgTypes[18]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Obstacles.ProtoReflect.Descriptor instead.
func (*Obstacles) Descriptor() ([]byte, []int) {
	return file_autopilot_proto_rawDescGZIP(), []int{18}
}

func (x *Obstacles) GetTtagSystem() *timestamppb.Timestamp {
	if x != nil {
		return x.TtagSystem
	}
	return nil
}

func (x *Obstacles) GetTtagSteadyNs() uint64 {
	if x != nil {
		return x.TtagSteadyNs
	}
	return 0
}

func (x *Obstacles) GetObstacles() []*ObstacleIf {
	if x != nil {
		return x.Obstacles
	}
	return nil
}

type Path struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	TtagSystem    *timestamppb.Timestamp `protobuf:"bytes,1,opt,name=ttag_system,json=ttagSystem,proto3" json:"ttag_system,omitempty"`
	TtagSteadyNs  uint64                 `protobuf:"varint,2,opt,name=ttag_steady_ns,json=ttagSteadyNs,proto3" json:"ttag_steady_ns,omitempty"`
	Path          []*Position            `protobuf:"bytes,3,rep,name=path,proto3" json:"path,omitempty"` // local path
	Obstacles     []*ObstacleIf          `protobuf:"bytes,4,rep,name=obstacles,proto3" json:"obstacles,omitempty"`
	SpeedMps      *float64               `protobuf:"fixed64,5,opt,name=speed_mps,json=speedMps,proto3,oneof" json:"speed_mps,omitempty"`
	Start         *Position              `protobuf:"bytes,6,opt,name=start,proto3,oneof" json:"start,omitempty"`
	EndLocal      *Position              `protobuf:"bytes,7,opt,name=end_local,json=endLocal,proto3,oneof" json:"end_local,omitempty"`
	EndGlobal     *Position              `protobuf:"bytes,8,opt,name=end_global,json=endGlobal,proto3,oneof" json:"end_global,omitempty"`
	GlobalPath    []*Position            `protobuf:"bytes,9,rep,name=global_path,json=globalPath,proto3" json:"global_path,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *Path) Reset() {
	*x = Path{}
	mi := &file_autopilot_proto_msgTypes[19]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Path) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Path) ProtoMessage() {}

func (x *Path) ProtoReflect() protoreflect.Message {
	mi := &file_autopilot_proto_msgTypes[19]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Path.ProtoReflect.Descriptor instead.
func (*Path) Descriptor() ([]byte, []int) {
	return file_autopilot_proto_rawDescGZIP(), []int{19}
}

func (x *Path) GetTtagSystem() *timestamppb.Timestamp {
	if x != nil {
		return x.TtagSystem
	}
	return nil
}

func (x *Path) GetTtagSteadyNs() uint64 {
	if x != nil {
		return x.TtagSteadyNs
	}
	return 0
}

func (x *Path) GetPath() []*Position {
	if x != nil {
		return x.Path
	}
	return nil
}

func (x *Path) GetObstacles() []*ObstacleIf {
	if x != nil {
		return x.Obstacles
	}
	return nil
}

func (x *Path) GetSpeedMps() float64 {
	if x != nil && x.SpeedMps != nil {
		return *x.SpeedMps
	}
	return 0
}

func (x *Path) GetStart() *Position {
	if x != nil {
		return x.Start
	}
	return nil
}

func (x *Path) GetEndLocal() *Position {
	if x != nil {
		return x.EndLocal
	}
	return nil
}

func (x *Path) GetEndGlobal() *Position {
	if x != nil {
		return x.EndGlobal
	}
	return nil
}

func (x *Path) GetGlobalPath() []*Position {
	if x != nil {
		return x.GlobalPath
	}
	return nil
}

type VehicleStateIf struct {
	state         protoimpl.MessageState        `protogen:"open.v1"`
	TtagNs        uint64                        `protobuf:"varint,1,opt,name=ttag_ns,json=ttagNs,proto3" json:"ttag_ns,omitempty"`
	VehicleData   *VehicleData                  `protobuf:"bytes,2,opt,name=vehicle_data,json=vehicleData,proto3" json:"vehicle_data,omitempty"`
	Mode          VehicleStateIf_Mode           `protobuf:"varint,3,opt,name=mode,proto3,enum=magothy.protobuf.autopilot.VehicleStateIf_Mode" json:"mode,omitempty"`
	HealthItems   []*VehicleStateIf_HealthItem  `protobuf:"bytes,4,rep,name=health_items,json=healthItems,proto3" json:"health_items,omitempty"`
	FaultResponse *VehicleStateIf_FaultResponse `protobuf:"bytes,5,opt,name=fault_response,json=faultResponse,proto3,oneof" json:"fault_response,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *VehicleStateIf) Reset() {
	*x = VehicleStateIf{}
	mi := &file_autopilot_proto_msgTypes[20]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *VehicleStateIf) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*VehicleStateIf) ProtoMessage() {}

func (x *VehicleStateIf) ProtoReflect() protoreflect.Message {
	mi := &file_autopilot_proto_msgTypes[20]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use VehicleStateIf.ProtoReflect.Descriptor instead.
func (*VehicleStateIf) Descriptor() ([]byte, []int) {
	return file_autopilot_proto_rawDescGZIP(), []int{20}
}

func (x *VehicleStateIf) GetTtagNs() uint64 {
	if x != nil {
		return x.TtagNs
	}
	return 0
}

func (x *VehicleStateIf) GetVehicleData() *VehicleData {
	if x != nil {
		return x.VehicleData
	}
	return nil
}

func (x *VehicleStateIf) GetMode() VehicleStateIf_Mode {
	if x != nil {
		return x.Mode
	}
	return VehicleStateIf_VS_STANDBY
}

func (x *VehicleStateIf) GetHealthItems() []*VehicleStateIf_HealthItem {
	if x != nil {
		return x.HealthItems
	}
	return nil
}

func (x *VehicleStateIf) GetFaultResponse() *VehicleStateIf_FaultResponse {
	if x != nil {
		return x.FaultResponse
	}
	return nil
}

type MavlinkMissionItemInt struct {
	state           protoimpl.MessageState `protogen:"open.v1"`
	TargetSystem    uint32                 `protobuf:"varint,1,opt,name=target_system,json=targetSystem,proto3" json:"target_system,omitempty"`
	TargetComponent uint32                 `protobuf:"varint,2,opt,name=target_component,json=targetComponent,proto3" json:"target_component,omitempty"`
	MissionType     uint32                 `protobuf:"varint,3,opt,name=mission_type,json=missionType,proto3" json:"mission_type,omitempty"`
	Seq             uint32                 `protobuf:"varint,4,opt,name=seq,proto3" json:"seq,omitempty"`
	Command         uint32                 `protobuf:"varint,5,opt,name=command,proto3" json:"command,omitempty"`
	Frame           uint32                 `protobuf:"varint,6,opt,name=frame,proto3" json:"frame,omitempty"`
	Current         bool                   `protobuf:"varint,7,opt,name=current,proto3" json:"current,omitempty"`
	Autocontinue    bool                   `protobuf:"varint,8,opt,name=autocontinue,proto3" json:"autocontinue,omitempty"`
	Param1          float32                `protobuf:"fixed32,9,opt,name=param1,proto3" json:"param1,omitempty"`
	Param2          float32                `protobuf:"fixed32,10,opt,name=param2,proto3" json:"param2,omitempty"`
	Param3          float32                `protobuf:"fixed32,11,opt,name=param3,proto3" json:"param3,omitempty"`
	Param4          float32                `protobuf:"fixed32,12,opt,name=param4,proto3" json:"param4,omitempty"`
	X               int32                  `protobuf:"varint,13,opt,name=x,proto3" json:"x,omitempty"`
	Y               int32                  `protobuf:"varint,14,opt,name=y,proto3" json:"y,omitempty"`
	Z               float32                `protobuf:"fixed32,15,opt,name=z,proto3" json:"z,omitempty"`
	unknownFields   protoimpl.UnknownFields
	sizeCache       protoimpl.SizeCache
}

func (x *MavlinkMissionItemInt) Reset() {
	*x = MavlinkMissionItemInt{}
	mi := &file_autopilot_proto_msgTypes[21]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *MavlinkMissionItemInt) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MavlinkMissionItemInt) ProtoMessage() {}

func (x *MavlinkMissionItemInt) ProtoReflect() protoreflect.Message {
	mi := &file_autopilot_proto_msgTypes[21]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MavlinkMissionItemInt.ProtoReflect.Descriptor instead.
func (*MavlinkMissionItemInt) Descriptor() ([]byte, []int) {
	return file_autopilot_proto_rawDescGZIP(), []int{21}
}

func (x *MavlinkMissionItemInt) GetTargetSystem() uint32 {
	if x != nil {
		return x.TargetSystem
	}
	return 0
}

func (x *MavlinkMissionItemInt) GetTargetComponent() uint32 {
	if x != nil {
		return x.TargetComponent
	}
	return 0
}

func (x *MavlinkMissionItemInt) GetMissionType() uint32 {
	if x != nil {
		return x.MissionType
	}
	return 0
}

func (x *MavlinkMissionItemInt) GetSeq() uint32 {
	if x != nil {
		return x.Seq
	}
	return 0
}

func (x *MavlinkMissionItemInt) GetCommand() uint32 {
	if x != nil {
		return x.Command
	}
	return 0
}

func (x *MavlinkMissionItemInt) GetFrame() uint32 {
	if x != nil {
		return x.Frame
	}
	return 0
}

func (x *MavlinkMissionItemInt) GetCurrent() bool {
	if x != nil {
		return x.Current
	}
	return false
}

func (x *MavlinkMissionItemInt) GetAutocontinue() bool {
	if x != nil {
		return x.Autocontinue
	}
	return false
}

func (x *MavlinkMissionItemInt) GetParam1() float32 {
	if x != nil {
		return x.Param1
	}
	return 0
}

func (x *MavlinkMissionItemInt) GetParam2() float32 {
	if x != nil {
		return x.Param2
	}
	return 0
}

func (x *MavlinkMissionItemInt) GetParam3() float32 {
	if x != nil {
		return x.Param3
	}
	return 0
}

func (x *MavlinkMissionItemInt) GetParam4() float32 {
	if x != nil {
		return x.Param4
	}
	return 0
}

func (x *MavlinkMissionItemInt) GetX() int32 {
	if x != nil {
		return x.X
	}
	return 0
}

func (x *MavlinkMissionItemInt) GetY() int32 {
	if x != nil {
		return x.Y
	}
	return 0
}

func (x *MavlinkMissionItemInt) GetZ() float32 {
	if x != nil {
		return x.Z
	}
	return 0
}

type MavlinkMission struct {
	state         protoimpl.MessageState   `protogen:"open.v1"`
	MissionItems  []*MavlinkMissionItemInt `protobuf:"bytes,1,rep,name=mission_items,json=missionItems,proto3" json:"mission_items,omitempty"`
	FenceItems    []*MavlinkMissionItemInt `protobuf:"bytes,2,rep,name=fence_items,json=fenceItems,proto3" json:"fence_items,omitempty"`
	RallyItems    []*MavlinkMissionItemInt `protobuf:"bytes,3,rep,name=rally_items,json=rallyItems,proto3" json:"rally_items,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *MavlinkMission) Reset() {
	*x = MavlinkMission{}
	mi := &file_autopilot_proto_msgTypes[22]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *MavlinkMission) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MavlinkMission) ProtoMessage() {}

func (x *MavlinkMission) ProtoReflect() protoreflect.Message {
	mi := &file_autopilot_proto_msgTypes[22]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MavlinkMission.ProtoReflect.Descriptor instead.
func (*MavlinkMission) Descriptor() ([]byte, []int) {
	return file_autopilot_proto_rawDescGZIP(), []int{22}
}

func (x *MavlinkMission) GetMissionItems() []*MavlinkMissionItemInt {
	if x != nil {
		return x.MissionItems
	}
	return nil
}

func (x *MavlinkMission) GetFenceItems() []*MavlinkMissionItemInt {
	if x != nil {
		return x.FenceItems
	}
	return nil
}

func (x *MavlinkMission) GetRallyItems() []*MavlinkMissionItemInt {
	if x != nil {
		return x.RallyItems
	}
	return nil
}

type GpsIf_RmcData struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	LatitudeDeg   *float64               `protobuf:"fixed64,1,opt,name=latitude_deg,json=latitudeDeg,proto3,oneof" json:"latitude_deg,omitempty"`         // use NaN to represent unset
	LongitudeDeg  *float64               `protobuf:"fixed64,2,opt,name=longitude_deg,json=longitudeDeg,proto3,oneof" json:"longitude_deg,omitempty"`      // use NaN to represent unset
	GroundSpeedKt *float64               `protobuf:"fixed64,3,opt,name=ground_speed_kt,json=groundSpeedKt,proto3,oneof" json:"ground_speed_kt,omitempty"` // use NaN to represent unset
	CourseTrueDeg *float64               `protobuf:"fixed64,4,opt,name=course_true_deg,json=courseTrueDeg,proto3,oneof" json:"course_true_deg,omitempty"` // use NaN to represent unset
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *GpsIf_RmcData) Reset() {
	*x = GpsIf_RmcData{}
	mi := &file_autopilot_proto_msgTypes[23]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GpsIf_RmcData) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GpsIf_RmcData) ProtoMessage() {}

func (x *GpsIf_RmcData) ProtoReflect() protoreflect.Message {
	mi := &file_autopilot_proto_msgTypes[23]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GpsIf_RmcData.ProtoReflect.Descriptor instead.
func (*GpsIf_RmcData) Descriptor() ([]byte, []int) {
	return file_autopilot_proto_rawDescGZIP(), []int{16, 0}
}

func (x *GpsIf_RmcData) GetLatitudeDeg() float64 {
	if x != nil && x.LatitudeDeg != nil {
		return *x.LatitudeDeg
	}
	return 0
}

func (x *GpsIf_RmcData) GetLongitudeDeg() float64 {
	if x != nil && x.LongitudeDeg != nil {
		return *x.LongitudeDeg
	}
	return 0
}

func (x *GpsIf_RmcData) GetGroundSpeedKt() float64 {
	if x != nil && x.GroundSpeedKt != nil {
		return *x.GroundSpeedKt
	}
	return 0
}

func (x *GpsIf_RmcData) GetCourseTrueDeg() float64 {
	if x != nil && x.CourseTrueDeg != nil {
		return *x.CourseTrueDeg
	}
	return 0
}

type GpsIf_GgaData struct {
	state         protoimpl.MessageState   `protogen:"open.v1"`
	LatitudeDeg   *float64                 `protobuf:"fixed64,1,opt,name=latitude_deg,json=latitudeDeg,proto3,oneof" json:"latitude_deg,omitempty"`    // use NaN to represent unset
	LongitudeDeg  *float64                 `protobuf:"fixed64,2,opt,name=longitude_deg,json=longitudeDeg,proto3,oneof" json:"longitude_deg,omitempty"` // use NaN to represent unset
	AltitudeM     *float64                 `protobuf:"fixed64,3,opt,name=altitude_m,json=altitudeM,proto3,oneof" json:"altitude_m,omitempty"`          // use NaN to represent unset
	NumSatellite  *int32                   `protobuf:"varint,4,opt,name=num_satellite,json=numSatellite,proto3,oneof" json:"num_satellite,omitempty"`  // use < 0 to represent unset
	FixQuality    GpsIf_GgaData_FixQuality `protobuf:"varint,5,opt,name=fix_quality,json=fixQuality,proto3,enum=magothy.protobuf.autopilot.GpsIf_GgaData_FixQuality" json:"fix_quality,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *GpsIf_GgaData) Reset() {
	*x = GpsIf_GgaData{}
	mi := &file_autopilot_proto_msgTypes[24]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GpsIf_GgaData) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GpsIf_GgaData) ProtoMessage() {}

func (x *GpsIf_GgaData) ProtoReflect() protoreflect.Message {
	mi := &file_autopilot_proto_msgTypes[24]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GpsIf_GgaData.ProtoReflect.Descriptor instead.
func (*GpsIf_GgaData) Descriptor() ([]byte, []int) {
	return file_autopilot_proto_rawDescGZIP(), []int{16, 1}
}

func (x *GpsIf_GgaData) GetLatitudeDeg() float64 {
	if x != nil && x.LatitudeDeg != nil {
		return *x.LatitudeDeg
	}
	return 0
}

func (x *GpsIf_GgaData) GetLongitudeDeg() float64 {
	if x != nil && x.LongitudeDeg != nil {
		return *x.LongitudeDeg
	}
	return 0
}

func (x *GpsIf_GgaData) GetAltitudeM() float64 {
	if x != nil && x.AltitudeM != nil {
		return *x.AltitudeM
	}
	return 0
}

func (x *GpsIf_GgaData) GetNumSatellite() int32 {
	if x != nil && x.NumSatellite != nil {
		return *x.NumSatellite
	}
	return 0
}

func (x *GpsIf_GgaData) GetFixQuality() GpsIf_GgaData_FixQuality {
	if x != nil {
		return x.FixQuality
	}
	return GpsIf_GgaData_FQ_INVALID
}

type ObstacleIf_Circle struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Origin        *Position              `protobuf:"bytes,1,opt,name=origin,proto3" json:"origin,omitempty"`
	RadiusM       float64                `protobuf:"fixed64,2,opt,name=radius_m,json=radiusM,proto3" json:"radius_m,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ObstacleIf_Circle) Reset() {
	*x = ObstacleIf_Circle{}
	mi := &file_autopilot_proto_msgTypes[25]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ObstacleIf_Circle) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ObstacleIf_Circle) ProtoMessage() {}

func (x *ObstacleIf_Circle) ProtoReflect() protoreflect.Message {
	mi := &file_autopilot_proto_msgTypes[25]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ObstacleIf_Circle.ProtoReflect.Descriptor instead.
func (*ObstacleIf_Circle) Descriptor() ([]byte, []int) {
	return file_autopilot_proto_rawDescGZIP(), []int{17, 0}
}

func (x *ObstacleIf_Circle) GetOrigin() *Position {
	if x != nil {
		return x.Origin
	}
	return nil
}

func (x *ObstacleIf_Circle) GetRadiusM() float64 {
	if x != nil {
		return x.RadiusM
	}
	return 0
}

type ObstacleIf_Polygon struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Vertices      []*Position            `protobuf:"bytes,1,rep,name=vertices,proto3" json:"vertices,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ObstacleIf_Polygon) Reset() {
	*x = ObstacleIf_Polygon{}
	mi := &file_autopilot_proto_msgTypes[26]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ObstacleIf_Polygon) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ObstacleIf_Polygon) ProtoMessage() {}

func (x *ObstacleIf_Polygon) ProtoReflect() protoreflect.Message {
	mi := &file_autopilot_proto_msgTypes[26]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ObstacleIf_Polygon.ProtoReflect.Descriptor instead.
func (*ObstacleIf_Polygon) Descriptor() ([]byte, []int) {
	return file_autopilot_proto_rawDescGZIP(), []int{17, 1}
}

func (x *ObstacleIf_Polygon) GetVertices() []*Position {
	if x != nil {
		return x.Vertices
	}
	return nil
}

type VehicleStateIf_HealthItem struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Index         uint32                 `protobuf:"varint,1,opt,name=index,proto3" json:"index,omitempty"`                          // also priority - smaller number is higher priority
	Uid           string                 `protobuf:"bytes,2,opt,name=uid,proto3" json:"uid,omitempty"`                               // unique identifier
	SensorId      uint32                 `protobuf:"varint,3,opt,name=sensor_id,json=sensorId,proto3" json:"sensor_id,omitempty"`    // status id for mavlink
	IsValid       bool                   `protobuf:"varint,4,opt,name=is_valid,json=isValid,proto3" json:"is_valid,omitempty"`       // true if properly configured, false otherwise
	Enabled       bool                   `protobuf:"varint,5,opt,name=enabled,proto3" json:"enabled,omitempty"`                      // true if enabled
	IsHealthy     bool                   `protobuf:"varint,6,opt,name=is_healthy,json=isHealthy,proto3" json:"is_healthy,omitempty"` // true on healthy, false on faulted
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *VehicleStateIf_HealthItem) Reset() {
	*x = VehicleStateIf_HealthItem{}
	mi := &file_autopilot_proto_msgTypes[27]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *VehicleStateIf_HealthItem) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*VehicleStateIf_HealthItem) ProtoMessage() {}

func (x *VehicleStateIf_HealthItem) ProtoReflect() protoreflect.Message {
	mi := &file_autopilot_proto_msgTypes[27]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use VehicleStateIf_HealthItem.ProtoReflect.Descriptor instead.
func (*VehicleStateIf_HealthItem) Descriptor() ([]byte, []int) {
	return file_autopilot_proto_rawDescGZIP(), []int{20, 0}
}

func (x *VehicleStateIf_HealthItem) GetIndex() uint32 {
	if x != nil {
		return x.Index
	}
	return 0
}

func (x *VehicleStateIf_HealthItem) GetUid() string {
	if x != nil {
		return x.Uid
	}
	return ""
}

func (x *VehicleStateIf_HealthItem) GetSensorId() uint32 {
	if x != nil {
		return x.SensorId
	}
	return 0
}

func (x *VehicleStateIf_HealthItem) GetIsValid() bool {
	if x != nil {
		return x.IsValid
	}
	return false
}

func (x *VehicleStateIf_HealthItem) GetEnabled() bool {
	if x != nil {
		return x.Enabled
	}
	return false
}

func (x *VehicleStateIf_HealthItem) GetIsHealthy() bool {
	if x != nil {
		return x.IsHealthy
	}
	return false
}

type VehicleStateIf_FaultResponse struct {
	state           protoimpl.MessageState           `protogen:"open.v1"`
	ResponseType    VehicleStateIf_FaultResponseType `protobuf:"varint,1,opt,name=response_type,json=responseType,proto3,enum=magothy.protobuf.autopilot.VehicleStateIf_FaultResponseType" json:"response_type,omitempty"`
	HealthItemIndex uint32                           `protobuf:"varint,2,opt,name=health_item_index,json=healthItemIndex,proto3" json:"health_item_index,omitempty"`
	unknownFields   protoimpl.UnknownFields
	sizeCache       protoimpl.SizeCache
}

func (x *VehicleStateIf_FaultResponse) Reset() {
	*x = VehicleStateIf_FaultResponse{}
	mi := &file_autopilot_proto_msgTypes[28]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *VehicleStateIf_FaultResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*VehicleStateIf_FaultResponse) ProtoMessage() {}

func (x *VehicleStateIf_FaultResponse) ProtoReflect() protoreflect.Message {
	mi := &file_autopilot_proto_msgTypes[28]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use VehicleStateIf_FaultResponse.ProtoReflect.Descriptor instead.
func (*VehicleStateIf_FaultResponse) Descriptor() ([]byte, []int) {
	return file_autopilot_proto_rawDescGZIP(), []int{20, 1}
}

func (x *VehicleStateIf_FaultResponse) GetResponseType() VehicleStateIf_FaultResponseType {
	if x != nil {
		return x.ResponseType
	}
	return VehicleStateIf_FR_IGNORE
}

func (x *VehicleStateIf_FaultResponse) GetHealthItemIndex() uint32 {
	if x != nil {
		return x.HealthItemIndex
	}
	return 0
}

var File_autopilot_proto protoreflect.FileDescriptor

var file_autopilot_proto_rawDesc = string([]byte{
	0x0a, 0x0f, 0x61, 0x75, 0x74, 0x6f, 0x70, 0x69, 0x6c, 0x6f, 0x74, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x12, 0x1a, 0x6d, 0x61, 0x67, 0x6f, 0x74, 0x68, 0x79, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x62, 0x75, 0x66, 0x2e, 0x61, 0x75, 0x74, 0x6f, 0x70, 0x69, 0x6c, 0x6f, 0x74, 0x1a, 0x1f, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x74,
	0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0x52,
	0x0a, 0x08, 0x50, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x21, 0x0a, 0x0c, 0x6c, 0x61,
	0x74, 0x69, 0x74, 0x75, 0x64, 0x65, 0x5f, 0x64, 0x65, 0x67, 0x18, 0x01, 0x20, 0x01, 0x28, 0x01,
	0x52, 0x0b, 0x6c, 0x61, 0x74, 0x69, 0x74, 0x75, 0x64, 0x65, 0x44, 0x65, 0x67, 0x12, 0x23, 0x0a,
	0x0d, 0x6c, 0x6f, 0x6e, 0x67, 0x69, 0x74, 0x75, 0x64, 0x65, 0x5f, 0x64, 0x65, 0x67, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x01, 0x52, 0x0c, 0x6c, 0x6f, 0x6e, 0x67, 0x69, 0x74, 0x75, 0x64, 0x65, 0x44,
	0x65, 0x67, 0x22, 0x4c, 0x0a, 0x0b, 0x41, 0x6e, 0x67, 0x75, 0x6c, 0x61, 0x72, 0x52, 0x61, 0x74,
	0x65, 0x12, 0x13, 0x0a, 0x05, 0x78, 0x5f, 0x64, 0x70, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x01,
	0x52, 0x04, 0x78, 0x44, 0x70, 0x73, 0x12, 0x13, 0x0a, 0x05, 0x79, 0x5f, 0x64, 0x70, 0x73, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x01, 0x52, 0x04, 0x79, 0x44, 0x70, 0x73, 0x12, 0x13, 0x0a, 0x05, 0x7a,
	0x5f, 0x64, 0x70, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x01, 0x52, 0x04, 0x7a, 0x44, 0x70, 0x73,
	0x22, 0x53, 0x0a, 0x0c, 0x41, 0x63, 0x63, 0x65, 0x6c, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x12, 0x15, 0x0a, 0x06, 0x78, 0x5f, 0x6d, 0x70, 0x73, 0x32, 0x18, 0x01, 0x20, 0x01, 0x28, 0x01,
	0x52, 0x05, 0x78, 0x4d, 0x70, 0x73, 0x32, 0x12, 0x15, 0x0a, 0x06, 0x79, 0x5f, 0x6d, 0x70, 0x73,
	0x32, 0x18, 0x02, 0x20, 0x01, 0x28, 0x01, 0x52, 0x05, 0x79, 0x4d, 0x70, 0x73, 0x32, 0x12, 0x15,
	0x0a, 0x06, 0x7a, 0x5f, 0x6d, 0x70, 0x73, 0x32, 0x18, 0x03, 0x20, 0x01, 0x28, 0x01, 0x52, 0x05,
	0x7a, 0x4d, 0x70, 0x73, 0x32, 0x22, 0x5a, 0x0a, 0x0d, 0x4d, 0x61, 0x67, 0x6e, 0x65, 0x74, 0x69,
	0x63, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x12, 0x17, 0x0a, 0x07, 0x78, 0x5f, 0x67, 0x61, 0x75, 0x73,
	0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x01, 0x52, 0x06, 0x78, 0x47, 0x61, 0x75, 0x73, 0x73, 0x12,
	0x17, 0x0a, 0x07, 0x79, 0x5f, 0x67, 0x61, 0x75, 0x73, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x01,
	0x52, 0x06, 0x79, 0x47, 0x61, 0x75, 0x73, 0x73, 0x12, 0x17, 0x0a, 0x07, 0x7a, 0x5f, 0x67, 0x61,
	0x75, 0x73, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x01, 0x52, 0x06, 0x7a, 0x47, 0x61, 0x75, 0x73,
	0x73, 0x22, 0x60, 0x0a, 0x05, 0x45, 0x75, 0x6c, 0x65, 0x72, 0x12, 0x19, 0x0a, 0x08, 0x72, 0x6f,
	0x6c, 0x6c, 0x5f, 0x64, 0x65, 0x67, 0x18, 0x01, 0x20, 0x01, 0x28, 0x01, 0x52, 0x07, 0x72, 0x6f,
	0x6c, 0x6c, 0x44, 0x65, 0x67, 0x12, 0x1b, 0x0a, 0x09, 0x70, 0x69, 0x74, 0x63, 0x68, 0x5f, 0x64,
	0x65, 0x67, 0x18, 0x02, 0x20, 0x01, 0x28, 0x01, 0x52, 0x08, 0x70, 0x69, 0x74, 0x63, 0x68, 0x44,
	0x65, 0x67, 0x12, 0x1f, 0x0a, 0x0b, 0x68, 0x65, 0x61, 0x64, 0x69, 0x6e, 0x67, 0x5f, 0x64, 0x65,
	0x67, 0x18, 0x03, 0x20, 0x01, 0x28, 0x01, 0x52, 0x0a, 0x68, 0x65, 0x61, 0x64, 0x69, 0x6e, 0x67,
	0x44, 0x65, 0x67, 0x22, 0x4d, 0x0a, 0x0c, 0x42, 0x6f, 0x64, 0x79, 0x56, 0x65, 0x6c, 0x6f, 0x63,
	0x69, 0x74, 0x79, 0x12, 0x13, 0x0a, 0x05, 0x78, 0x5f, 0x6d, 0x70, 0x73, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x01, 0x52, 0x04, 0x78, 0x4d, 0x70, 0x73, 0x12, 0x13, 0x0a, 0x05, 0x79, 0x5f, 0x6d, 0x70,
	0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x01, 0x52, 0x04, 0x79, 0x4d, 0x70, 0x73, 0x12, 0x13, 0x0a,
	0x05, 0x7a, 0x5f, 0x6d, 0x70, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x01, 0x52, 0x04, 0x7a, 0x4d,
	0x70, 0x73, 0x22, 0x65, 0x0a, 0x10, 0x49, 0x6e, 0x65, 0x72, 0x74, 0x69, 0x61, 0x6c, 0x56, 0x65,
	0x6c, 0x6f, 0x63, 0x69, 0x74, 0x79, 0x12, 0x1b, 0x0a, 0x09, 0x6e, 0x6f, 0x72, 0x74, 0x68, 0x5f,
	0x6d, 0x70, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x01, 0x52, 0x08, 0x6e, 0x6f, 0x72, 0x74, 0x68,
	0x4d, 0x70, 0x73, 0x12, 0x19, 0x0a, 0x08, 0x65, 0x61, 0x73, 0x74, 0x5f, 0x6d, 0x70, 0x73, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x01, 0x52, 0x07, 0x65, 0x61, 0x73, 0x74, 0x4d, 0x70, 0x73, 0x12, 0x19,
	0x0a, 0x08, 0x64, 0x6f, 0x77, 0x6e, 0x5f, 0x6d, 0x70, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x01,
	0x52, 0x07, 0x64, 0x6f, 0x77, 0x6e, 0x4d, 0x70, 0x73, 0x22, 0x50, 0x0a, 0x0c, 0x57, 0x61, 0x74,
	0x65, 0x72, 0x43, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x74, 0x12, 0x1b, 0x0a, 0x09, 0x73, 0x70, 0x65,
	0x65, 0x64, 0x5f, 0x6d, 0x70, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x01, 0x52, 0x08, 0x73, 0x70,
	0x65, 0x65, 0x64, 0x4d, 0x70, 0x73, 0x12, 0x23, 0x0a, 0x0d, 0x64, 0x69, 0x72, 0x65, 0x63, 0x74,
	0x69, 0x6f, 0x6e, 0x5f, 0x64, 0x65, 0x67, 0x18, 0x02, 0x20, 0x01, 0x28, 0x01, 0x52, 0x0c, 0x64,
	0x69, 0x72, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x44, 0x65, 0x67, 0x22, 0x7c, 0x0a, 0x09, 0x46,
	0x75, 0x65, 0x6c, 0x47, 0x61, 0x75, 0x67, 0x65, 0x12, 0x1b, 0x0a, 0x09, 0x76, 0x6f, 0x6c, 0x74,
	0x61, 0x67, 0x65, 0x5f, 0x56, 0x18, 0x01, 0x20, 0x01, 0x28, 0x01, 0x52, 0x08, 0x76, 0x6f, 0x6c,
	0x74, 0x61, 0x67, 0x65, 0x56, 0x12, 0x1b, 0x0a, 0x09, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x74,
	0x5f, 0x41, 0x18, 0x02, 0x20, 0x01, 0x28, 0x01, 0x52, 0x08, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e,
	0x74, 0x41, 0x12, 0x35, 0x0a, 0x17, 0x73, 0x74, 0x61, 0x74, 0x65, 0x5f, 0x6f, 0x66, 0x5f, 0x63,
	0x68, 0x61, 0x72, 0x67, 0x65, 0x5f, 0x70, 0x65, 0x72, 0x63, 0x65, 0x6e, 0x74, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x01, 0x52, 0x14, 0x73, 0x74, 0x61, 0x74, 0x65, 0x4f, 0x66, 0x43, 0x68, 0x61, 0x72,
	0x67, 0x65, 0x50, 0x65, 0x72, 0x63, 0x65, 0x6e, 0x74, 0x22, 0xc7, 0x19, 0x0a, 0x0b, 0x56, 0x65,
	0x68, 0x69, 0x63, 0x6c, 0x65, 0x44, 0x61, 0x74, 0x61, 0x12, 0x45, 0x0a, 0x08, 0x70, 0x6f, 0x73,
	0x69, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x24, 0x2e, 0x6d, 0x61,
	0x67, 0x6f, 0x74, 0x68, 0x79, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x61,
	0x75, 0x74, 0x6f, 0x70, 0x69, 0x6c, 0x6f, 0x74, 0x2e, 0x50, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f,
	0x6e, 0x48, 0x00, 0x52, 0x08, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x88, 0x01, 0x01,
	0x12, 0x5b, 0x0a, 0x0f, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x73, 0x6f, 0x75,
	0x72, 0x63, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x32, 0x2e, 0x6d, 0x61, 0x67, 0x6f,
	0x74, 0x68, 0x79, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x61, 0x75, 0x74,
	0x6f, 0x70, 0x69, 0x6c, 0x6f, 0x74, 0x2e, 0x56, 0x65, 0x68, 0x69, 0x63, 0x6c, 0x65, 0x44, 0x61,
	0x74, 0x61, 0x2e, 0x44, 0x61, 0x74, 0x61, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x52, 0x0e, 0x70,
	0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x12, 0x35, 0x0a,
	0x17, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x74, 0x74, 0x61, 0x67, 0x5f, 0x6e,
	0x73, 0x5f, 0x73, 0x74, 0x65, 0x61, 0x64, 0x79, 0x18, 0x03, 0x20, 0x01, 0x28, 0x04, 0x52, 0x14,
	0x70, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x74, 0x61, 0x67, 0x4e, 0x73, 0x53, 0x74,
	0x65, 0x61, 0x64, 0x79, 0x12, 0x42, 0x0a, 0x08, 0x61, 0x74, 0x74, 0x69, 0x74, 0x75, 0x64, 0x65,
	0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x21, 0x2e, 0x6d, 0x61, 0x67, 0x6f, 0x74, 0x68, 0x79,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x61, 0x75, 0x74, 0x6f, 0x70, 0x69,
	0x6c, 0x6f, 0x74, 0x2e, 0x45, 0x75, 0x6c, 0x65, 0x72, 0x48, 0x01, 0x52, 0x08, 0x61, 0x74, 0x74,
	0x69, 0x74, 0x75, 0x64, 0x65, 0x88, 0x01, 0x01, 0x12, 0x5b, 0x0a, 0x0f, 0x61, 0x74, 0x74, 0x69,
	0x74, 0x75, 0x64, 0x65, 0x5f, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28,
	0x0e, 0x32, 0x32, 0x2e, 0x6d, 0x61, 0x67, 0x6f, 0x74, 0x68, 0x79, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x62, 0x75, 0x66, 0x2e, 0x61, 0x75, 0x74, 0x6f, 0x70, 0x69, 0x6c, 0x6f, 0x74, 0x2e, 0x56,
	0x65, 0x68, 0x69, 0x63, 0x6c, 0x65, 0x44, 0x61, 0x74, 0x61, 0x2e, 0x44, 0x61, 0x74, 0x61, 0x53,
	0x6f, 0x75, 0x72, 0x63, 0x65, 0x52, 0x0e, 0x61, 0x74, 0x74, 0x69, 0x74, 0x75, 0x64, 0x65, 0x53,
	0x6f, 0x75, 0x72, 0x63, 0x65, 0x12, 0x35, 0x0a, 0x17, 0x61, 0x74, 0x74, 0x69, 0x74, 0x75, 0x64,
	0x65, 0x5f, 0x74, 0x74, 0x61, 0x67, 0x5f, 0x6e, 0x73, 0x5f, 0x73, 0x74, 0x65, 0x61, 0x64, 0x79,
	0x18, 0x06, 0x20, 0x01, 0x28, 0x04, 0x52, 0x14, 0x61, 0x74, 0x74, 0x69, 0x74, 0x75, 0x64, 0x65,
	0x54, 0x74, 0x61, 0x67, 0x4e, 0x73, 0x53, 0x74, 0x65, 0x61, 0x64, 0x79, 0x12, 0x4f, 0x0a, 0x0c,
	0x61, 0x6e, 0x67, 0x75, 0x6c, 0x61, 0x72, 0x5f, 0x72, 0x61, 0x74, 0x65, 0x18, 0x07, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x27, 0x2e, 0x6d, 0x61, 0x67, 0x6f, 0x74, 0x68, 0x79, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x61, 0x75, 0x74, 0x6f, 0x70, 0x69, 0x6c, 0x6f, 0x74, 0x2e,
	0x41, 0x6e, 0x67, 0x75, 0x6c, 0x61, 0x72, 0x52, 0x61, 0x74, 0x65, 0x48, 0x02, 0x52, 0x0b, 0x61,
	0x6e, 0x67, 0x75, 0x6c, 0x61, 0x72, 0x52, 0x61, 0x74, 0x65, 0x88, 0x01, 0x01, 0x12, 0x62, 0x0a,
	0x13, 0x61, 0x6e, 0x67, 0x75, 0x6c, 0x61, 0x72, 0x5f, 0x72, 0x61, 0x74, 0x65, 0x5f, 0x73, 0x6f,
	0x75, 0x72, 0x63, 0x65, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x32, 0x2e, 0x6d, 0x61, 0x67,
	0x6f, 0x74, 0x68, 0x79, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x61, 0x75,
	0x74, 0x6f, 0x70, 0x69, 0x6c, 0x6f, 0x74, 0x2e, 0x56, 0x65, 0x68, 0x69, 0x63, 0x6c, 0x65, 0x44,
	0x61, 0x74, 0x61, 0x2e, 0x44, 0x61, 0x74, 0x61, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x52, 0x11,
	0x61, 0x6e, 0x67, 0x75, 0x6c, 0x61, 0x72, 0x52, 0x61, 0x74, 0x65, 0x53, 0x6f, 0x75, 0x72, 0x63,
	0x65, 0x12, 0x3c, 0x0a, 0x1b, 0x61, 0x6e, 0x67, 0x75, 0x6c, 0x61, 0x72, 0x5f, 0x72, 0x61, 0x74,
	0x65, 0x5f, 0x74, 0x74, 0x61, 0x67, 0x5f, 0x6e, 0x73, 0x5f, 0x73, 0x74, 0x65, 0x61, 0x64, 0x79,
	0x18, 0x09, 0x20, 0x01, 0x28, 0x04, 0x52, 0x17, 0x61, 0x6e, 0x67, 0x75, 0x6c, 0x61, 0x72, 0x52,
	0x61, 0x74, 0x65, 0x54, 0x74, 0x61, 0x67, 0x4e, 0x73, 0x53, 0x74, 0x65, 0x61, 0x64, 0x79, 0x12,
	0x51, 0x0a, 0x0c, 0x61, 0x63, 0x63, 0x65, 0x6c, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18,
	0x0a, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x28, 0x2e, 0x6d, 0x61, 0x67, 0x6f, 0x74, 0x68, 0x79, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x61, 0x75, 0x74, 0x6f, 0x70, 0x69, 0x6c,
	0x6f, 0x74, 0x2e, 0x41, 0x63, 0x63, 0x65, 0x6c, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x48,
	0x03, 0x52, 0x0c, 0x61, 0x63, 0x63, 0x65, 0x6c, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x88,
	0x01, 0x01, 0x12, 0x63, 0x0a, 0x13, 0x61, 0x63, 0x63, 0x65, 0x6c, 0x65, 0x72, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x5f, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x0e, 0x32,
	0x32, 0x2e, 0x6d, 0x61, 0x67, 0x6f, 0x74, 0x68, 0x79, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62,
	0x75, 0x66, 0x2e, 0x61, 0x75, 0x74, 0x6f, 0x70, 0x69, 0x6c, 0x6f, 0x74, 0x2e, 0x56, 0x65, 0x68,
	0x69, 0x63, 0x6c, 0x65, 0x44, 0x61, 0x74, 0x61, 0x2e, 0x44, 0x61, 0x74, 0x61, 0x53, 0x6f, 0x75,
	0x72, 0x63, 0x65, 0x52, 0x12, 0x61, 0x63, 0x63, 0x65, 0x6c, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x12, 0x3d, 0x0a, 0x1b, 0x61, 0x63, 0x63, 0x65, 0x6c,
	0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x74, 0x74, 0x61, 0x67, 0x5f, 0x6e, 0x73, 0x5f,
	0x73, 0x74, 0x65, 0x61, 0x64, 0x79, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x04, 0x52, 0x18, 0x61, 0x63,
	0x63, 0x65, 0x6c, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x74, 0x61, 0x67, 0x4e, 0x73,
	0x53, 0x74, 0x65, 0x61, 0x64, 0x79, 0x12, 0x55, 0x0a, 0x0e, 0x6d, 0x61, 0x67, 0x6e, 0x65, 0x74,
	0x69, 0x63, 0x5f, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x29,
	0x2e, 0x6d, 0x61, 0x67, 0x6f, 0x74, 0x68, 0x79, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75,
	0x66, 0x2e, 0x61, 0x75, 0x74, 0x6f, 0x70, 0x69, 0x6c, 0x6f, 0x74, 0x2e, 0x4d, 0x61, 0x67, 0x6e,
	0x65, 0x74, 0x69, 0x63, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x48, 0x04, 0x52, 0x0d, 0x6d, 0x61, 0x67,
	0x6e, 0x65, 0x74, 0x69, 0x63, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x88, 0x01, 0x01, 0x12, 0x66, 0x0a,
	0x15, 0x6d, 0x61, 0x67, 0x6e, 0x65, 0x74, 0x69, 0x63, 0x5f, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x5f,
	0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x32, 0x2e, 0x6d,
	0x61, 0x67, 0x6f, 0x74, 0x68, 0x79, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e,
	0x61, 0x75, 0x74, 0x6f, 0x70, 0x69, 0x6c, 0x6f, 0x74, 0x2e, 0x56, 0x65, 0x68, 0x69, 0x63, 0x6c,
	0x65, 0x44, 0x61, 0x74, 0x61, 0x2e, 0x44, 0x61, 0x74, 0x61, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65,
	0x52, 0x13, 0x6d, 0x61, 0x67, 0x6e, 0x65, 0x74, 0x69, 0x63, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x53,
	0x6f, 0x75, 0x72, 0x63, 0x65, 0x12, 0x40, 0x0a, 0x1d, 0x6d, 0x61, 0x67, 0x6e, 0x65, 0x74, 0x69,
	0x63, 0x5f, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x5f, 0x74, 0x74, 0x61, 0x67, 0x5f, 0x6e, 0x73, 0x5f,
	0x73, 0x74, 0x65, 0x61, 0x64, 0x79, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x04, 0x52, 0x19, 0x6d, 0x61,
	0x67, 0x6e, 0x65, 0x74, 0x69, 0x63, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x54, 0x74, 0x61, 0x67, 0x4e,
	0x73, 0x53, 0x74, 0x65, 0x61, 0x64, 0x79, 0x12, 0x1c, 0x0a, 0x07, 0x64, 0x65, 0x70, 0x74, 0x68,
	0x5f, 0x6d, 0x18, 0x10, 0x20, 0x01, 0x28, 0x01, 0x48, 0x05, 0x52, 0x06, 0x64, 0x65, 0x70, 0x74,
	0x68, 0x4d, 0x88, 0x01, 0x01, 0x12, 0x55, 0x0a, 0x0c, 0x64, 0x65, 0x70, 0x74, 0x68, 0x5f, 0x73,
	0x6f, 0x75, 0x72, 0x63, 0x65, 0x18, 0x11, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x32, 0x2e, 0x6d, 0x61,
	0x67, 0x6f, 0x74, 0x68, 0x79, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x61,
	0x75, 0x74, 0x6f, 0x70, 0x69, 0x6c, 0x6f, 0x74, 0x2e, 0x56, 0x65, 0x68, 0x69, 0x63, 0x6c, 0x65,
	0x44, 0x61, 0x74, 0x61, 0x2e, 0x44, 0x61, 0x74, 0x61, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x52,
	0x0b, 0x64, 0x65, 0x70, 0x74, 0x68, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x12, 0x2f, 0x0a, 0x14,
	0x64, 0x65, 0x70, 0x74, 0x68, 0x5f, 0x74, 0x74, 0x61, 0x67, 0x5f, 0x6e, 0x73, 0x5f, 0x73, 0x74,
	0x65, 0x61, 0x64, 0x79, 0x18, 0x12, 0x20, 0x01, 0x28, 0x04, 0x52, 0x11, 0x64, 0x65, 0x70, 0x74,
	0x68, 0x54, 0x74, 0x61, 0x67, 0x4e, 0x73, 0x53, 0x74, 0x65, 0x61, 0x64, 0x79, 0x12, 0x22, 0x0a,
	0x0a, 0x61, 0x6c, 0x74, 0x69, 0x74, 0x75, 0x64, 0x65, 0x5f, 0x6d, 0x18, 0x13, 0x20, 0x01, 0x28,
	0x01, 0x48, 0x06, 0x52, 0x09, 0x61, 0x6c, 0x74, 0x69, 0x74, 0x75, 0x64, 0x65, 0x4d, 0x88, 0x01,
	0x01, 0x12, 0x5b, 0x0a, 0x0f, 0x61, 0x6c, 0x74, 0x69, 0x74, 0x75, 0x64, 0x65, 0x5f, 0x73, 0x6f,
	0x75, 0x72, 0x63, 0x65, 0x18, 0x14, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x32, 0x2e, 0x6d, 0x61, 0x67,
	0x6f, 0x74, 0x68, 0x79, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x61, 0x75,
	0x74, 0x6f, 0x70, 0x69, 0x6c, 0x6f, 0x74, 0x2e, 0x56, 0x65, 0x68, 0x69, 0x63, 0x6c, 0x65, 0x44,
	0x61, 0x74, 0x61, 0x2e, 0x44, 0x61, 0x74, 0x61, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x52, 0x0e,
	0x61, 0x6c, 0x74, 0x69, 0x74, 0x75, 0x64, 0x65, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x12, 0x35,
	0x0a, 0x17, 0x61, 0x6c, 0x74, 0x69, 0x74, 0x75, 0x64, 0x65, 0x5f, 0x74, 0x74, 0x61, 0x67, 0x5f,
	0x6e, 0x73, 0x5f, 0x73, 0x74, 0x65, 0x61, 0x64, 0x79, 0x18, 0x15, 0x20, 0x01, 0x28, 0x04, 0x52,
	0x14, 0x61, 0x6c, 0x74, 0x69, 0x74, 0x75, 0x64, 0x65, 0x54, 0x74, 0x61, 0x67, 0x4e, 0x73, 0x53,
	0x74, 0x65, 0x61, 0x64, 0x79, 0x12, 0x20, 0x0a, 0x09, 0x73, 0x70, 0x65, 0x65, 0x64, 0x5f, 0x6d,
	0x70, 0x73, 0x18, 0x16, 0x20, 0x01, 0x28, 0x01, 0x48, 0x07, 0x52, 0x08, 0x73, 0x70, 0x65, 0x65,
	0x64, 0x4d, 0x70, 0x73, 0x88, 0x01, 0x01, 0x12, 0x55, 0x0a, 0x0c, 0x73, 0x70, 0x65, 0x65, 0x64,
	0x5f, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x18, 0x17, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x32, 0x2e,
	0x6d, 0x61, 0x67, 0x6f, 0x74, 0x68, 0x79, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66,
	0x2e, 0x61, 0x75, 0x74, 0x6f, 0x70, 0x69, 0x6c, 0x6f, 0x74, 0x2e, 0x56, 0x65, 0x68, 0x69, 0x63,
	0x6c, 0x65, 0x44, 0x61, 0x74, 0x61, 0x2e, 0x44, 0x61, 0x74, 0x61, 0x53, 0x6f, 0x75, 0x72, 0x63,
	0x65, 0x52, 0x0b, 0x73, 0x70, 0x65, 0x65, 0x64, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x12, 0x2f,
	0x0a, 0x14, 0x73, 0x70, 0x65, 0x65, 0x64, 0x5f, 0x74, 0x74, 0x61, 0x67, 0x5f, 0x6e, 0x73, 0x5f,
	0x73, 0x74, 0x65, 0x61, 0x64, 0x79, 0x18, 0x18, 0x20, 0x01, 0x28, 0x04, 0x52, 0x11, 0x73, 0x70,
	0x65, 0x65, 0x64, 0x54, 0x74, 0x61, 0x67, 0x4e, 0x73, 0x53, 0x74, 0x65, 0x61, 0x64, 0x79, 0x12,
	0x22, 0x0a, 0x0a, 0x63, 0x6f, 0x75, 0x72, 0x73, 0x65, 0x5f, 0x64, 0x65, 0x67, 0x18, 0x19, 0x20,
	0x01, 0x28, 0x01, 0x48, 0x08, 0x52, 0x09, 0x63, 0x6f, 0x75, 0x72, 0x73, 0x65, 0x44, 0x65, 0x67,
	0x88, 0x01, 0x01, 0x12, 0x57, 0x0a, 0x0d, 0x63, 0x6f, 0x75, 0x72, 0x73, 0x65, 0x5f, 0x73, 0x6f,
	0x75, 0x72, 0x63, 0x65, 0x18, 0x1a, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x32, 0x2e, 0x6d, 0x61, 0x67,
	0x6f, 0x74, 0x68, 0x79, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x61, 0x75,
	0x74, 0x6f, 0x70, 0x69, 0x6c, 0x6f, 0x74, 0x2e, 0x56, 0x65, 0x68, 0x69, 0x63, 0x6c, 0x65, 0x44,
	0x61, 0x74, 0x61, 0x2e, 0x44, 0x61, 0x74, 0x61, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x52, 0x0c,
	0x63, 0x6f, 0x75, 0x72, 0x73, 0x65, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x12, 0x31, 0x0a, 0x15,
	0x63, 0x6f, 0x75, 0x72, 0x73, 0x65, 0x5f, 0x74, 0x74, 0x61, 0x67, 0x5f, 0x6e, 0x73, 0x5f, 0x73,
	0x74, 0x65, 0x61, 0x64, 0x79, 0x18, 0x1b, 0x20, 0x01, 0x28, 0x04, 0x52, 0x12, 0x63, 0x6f, 0x75,
	0x72, 0x73, 0x65, 0x54, 0x74, 0x61, 0x67, 0x4e, 0x73, 0x53, 0x74, 0x65, 0x61, 0x64, 0x79, 0x12,
	0x52, 0x0a, 0x0d, 0x62, 0x6f, 0x64, 0x79, 0x5f, 0x76, 0x65, 0x6c, 0x6f, 0x63, 0x69, 0x74, 0x79,
	0x18, 0x1c, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x28, 0x2e, 0x6d, 0x61, 0x67, 0x6f, 0x74, 0x68, 0x79,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x61, 0x75, 0x74, 0x6f, 0x70, 0x69,
	0x6c, 0x6f, 0x74, 0x2e, 0x42, 0x6f, 0x64, 0x79, 0x56, 0x65, 0x6c, 0x6f, 0x63, 0x69, 0x74, 0x79,
	0x48, 0x09, 0x52, 0x0c, 0x62, 0x6f, 0x64, 0x79, 0x56, 0x65, 0x6c, 0x6f, 0x63, 0x69, 0x74, 0x79,
	0x88, 0x01, 0x01, 0x12, 0x64, 0x0a, 0x14, 0x62, 0x6f, 0x64, 0x79, 0x5f, 0x76, 0x65, 0x6c, 0x6f,
	0x63, 0x69, 0x74, 0x79, 0x5f, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x18, 0x1d, 0x20, 0x01, 0x28,
	0x0e, 0x32, 0x32, 0x2e, 0x6d, 0x61, 0x67, 0x6f, 0x74, 0x68, 0x79, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x62, 0x75, 0x66, 0x2e, 0x61, 0x75, 0x74, 0x6f, 0x70, 0x69, 0x6c, 0x6f, 0x74, 0x2e, 0x56,
	0x65, 0x68, 0x69, 0x63, 0x6c, 0x65, 0x44, 0x61, 0x74, 0x61, 0x2e, 0x44, 0x61, 0x74, 0x61, 0x53,
	0x6f, 0x75, 0x72, 0x63, 0x65, 0x52, 0x12, 0x62, 0x6f, 0x64, 0x79, 0x56, 0x65, 0x6c, 0x6f, 0x63,
	0x69, 0x74, 0x79, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x12, 0x3e, 0x0a, 0x1c, 0x62, 0x6f, 0x64,
	0x79, 0x5f, 0x76, 0x65, 0x6c, 0x6f, 0x63, 0x69, 0x74, 0x79, 0x5f, 0x74, 0x74, 0x61, 0x67, 0x5f,
	0x6e, 0x73, 0x5f, 0x73, 0x74, 0x65, 0x61, 0x64, 0x79, 0x18, 0x1e, 0x20, 0x01, 0x28, 0x04, 0x52,
	0x18, 0x62, 0x6f, 0x64, 0x79, 0x56, 0x65, 0x6c, 0x6f, 0x63, 0x69, 0x74, 0x79, 0x54, 0x74, 0x61,
	0x67, 0x4e, 0x73, 0x53, 0x74, 0x65, 0x61, 0x64, 0x79, 0x12, 0x52, 0x0a, 0x0d, 0x77, 0x61, 0x74,
	0x65, 0x72, 0x5f, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x74, 0x18, 0x1f, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x28, 0x2e, 0x6d, 0x61, 0x67, 0x6f, 0x74, 0x68, 0x79, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x62, 0x75, 0x66, 0x2e, 0x61, 0x75, 0x74, 0x6f, 0x70, 0x69, 0x6c, 0x6f, 0x74, 0x2e, 0x57, 0x61,
	0x74, 0x65, 0x72, 0x43, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x74, 0x48, 0x0a, 0x52, 0x0c, 0x77, 0x61,
	0x74, 0x65, 0x72, 0x43, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x74, 0x88, 0x01, 0x01, 0x12, 0x64, 0x0a,
	0x14, 0x77, 0x61, 0x74, 0x65, 0x72, 0x5f, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x74, 0x5f, 0x73,
	0x6f, 0x75, 0x72, 0x63, 0x65, 0x18, 0x20, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x32, 0x2e, 0x6d, 0x61,
	0x67, 0x6f, 0x74, 0x68, 0x79, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x61,
	0x75, 0x74, 0x6f, 0x70, 0x69, 0x6c, 0x6f, 0x74, 0x2e, 0x56, 0x65, 0x68, 0x69, 0x63, 0x6c, 0x65,
	0x44, 0x61, 0x74, 0x61, 0x2e, 0x44, 0x61, 0x74, 0x61, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x52,
	0x12, 0x77, 0x61, 0x74, 0x65, 0x72, 0x43, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x74, 0x53, 0x6f, 0x75,
	0x72, 0x63, 0x65, 0x12, 0x3e, 0x0a, 0x1c, 0x77, 0x61, 0x74, 0x65, 0x72, 0x5f, 0x63, 0x75, 0x72,
	0x72, 0x65, 0x6e, 0x74, 0x5f, 0x74, 0x74, 0x61, 0x67, 0x5f, 0x6e, 0x73, 0x5f, 0x73, 0x74, 0x65,
	0x61, 0x64, 0x79, 0x18, 0x21, 0x20, 0x01, 0x28, 0x04, 0x52, 0x18, 0x77, 0x61, 0x74, 0x65, 0x72,
	0x43, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x74, 0x54, 0x74, 0x61, 0x67, 0x4e, 0x73, 0x53, 0x74, 0x65,
	0x61, 0x64, 0x79, 0x12, 0x3c, 0x0a, 0x18, 0x77, 0x61, 0x74, 0x65, 0x72, 0x5f, 0x72, 0x65, 0x6c,
	0x61, 0x74, 0x69, 0x76, 0x65, 0x5f, 0x73, 0x70, 0x65, 0x65, 0x64, 0x5f, 0x6d, 0x70, 0x73, 0x18,
	0x22, 0x20, 0x01, 0x28, 0x01, 0x48, 0x0b, 0x52, 0x15, 0x77, 0x61, 0x74, 0x65, 0x72, 0x52, 0x65,
	0x6c, 0x61, 0x74, 0x69, 0x76, 0x65, 0x53, 0x70, 0x65, 0x65, 0x64, 0x4d, 0x70, 0x73, 0x88, 0x01,
	0x01, 0x12, 0x71, 0x0a, 0x1b, 0x77, 0x61, 0x74, 0x65, 0x72, 0x5f, 0x72, 0x65, 0x6c, 0x61, 0x74,
	0x69, 0x76, 0x65, 0x5f, 0x73, 0x70, 0x65, 0x65, 0x64, 0x5f, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65,
	0x18, 0x23, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x32, 0x2e, 0x6d, 0x61, 0x67, 0x6f, 0x74, 0x68, 0x79,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x61, 0x75, 0x74, 0x6f, 0x70, 0x69,
	0x6c, 0x6f, 0x74, 0x2e, 0x56, 0x65, 0x68, 0x69, 0x63, 0x6c, 0x65, 0x44, 0x61, 0x74, 0x61, 0x2e,
	0x44, 0x61, 0x74, 0x61, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x52, 0x18, 0x77, 0x61, 0x74, 0x65,
	0x72, 0x52, 0x65, 0x6c, 0x61, 0x74, 0x69, 0x76, 0x65, 0x53, 0x70, 0x65, 0x65, 0x64, 0x53, 0x6f,
	0x75, 0x72, 0x63, 0x65, 0x12, 0x4b, 0x0a, 0x23, 0x77, 0x61, 0x74, 0x65, 0x72, 0x5f, 0x72, 0x65,
	0x6c, 0x61, 0x74, 0x69, 0x76, 0x65, 0x5f, 0x73, 0x70, 0x65, 0x65, 0x64, 0x5f, 0x74, 0x74, 0x61,
	0x67, 0x5f, 0x6e, 0x73, 0x5f, 0x73, 0x74, 0x65, 0x61, 0x64, 0x79, 0x18, 0x24, 0x20, 0x01, 0x28,
	0x04, 0x52, 0x1e, 0x77, 0x61, 0x74, 0x65, 0x72, 0x52, 0x65, 0x6c, 0x61, 0x74, 0x69, 0x76, 0x65,
	0x53, 0x70, 0x65, 0x65, 0x64, 0x54, 0x74, 0x61, 0x67, 0x4e, 0x73, 0x53, 0x74, 0x65, 0x61, 0x64,
	0x79, 0x12, 0x49, 0x0a, 0x0a, 0x66, 0x75, 0x65, 0x6c, 0x5f, 0x67, 0x61, 0x75, 0x67, 0x65, 0x18,
	0x25, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x25, 0x2e, 0x6d, 0x61, 0x67, 0x6f, 0x74, 0x68, 0x79, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x61, 0x75, 0x74, 0x6f, 0x70, 0x69, 0x6c,
	0x6f, 0x74, 0x2e, 0x46, 0x75, 0x65, 0x6c, 0x47, 0x61, 0x75, 0x67, 0x65, 0x48, 0x0c, 0x52, 0x09,
	0x66, 0x75, 0x65, 0x6c, 0x47, 0x61, 0x75, 0x67, 0x65, 0x88, 0x01, 0x01, 0x12, 0x5e, 0x0a, 0x11,
	0x66, 0x75, 0x65, 0x6c, 0x5f, 0x67, 0x61, 0x75, 0x67, 0x65, 0x5f, 0x73, 0x6f, 0x75, 0x72, 0x63,
	0x65, 0x18, 0x26, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x32, 0x2e, 0x6d, 0x61, 0x67, 0x6f, 0x74, 0x68,
	0x79, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x61, 0x75, 0x74, 0x6f, 0x70,
	0x69, 0x6c, 0x6f, 0x74, 0x2e, 0x56, 0x65, 0x68, 0x69, 0x63, 0x6c, 0x65, 0x44, 0x61, 0x74, 0x61,
	0x2e, 0x44, 0x61, 0x74, 0x61, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x52, 0x0f, 0x66, 0x75, 0x65,
	0x6c, 0x47, 0x61, 0x75, 0x67, 0x65, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x12, 0x38, 0x0a, 0x19,
	0x66, 0x75, 0x65, 0x6c, 0x5f, 0x67, 0x61, 0x75, 0x67, 0x65, 0x5f, 0x74, 0x74, 0x61, 0x67, 0x5f,
	0x6e, 0x73, 0x5f, 0x73, 0x74, 0x65, 0x61, 0x64, 0x79, 0x18, 0x27, 0x20, 0x01, 0x28, 0x04, 0x52,
	0x15, 0x66, 0x75, 0x65, 0x6c, 0x47, 0x61, 0x75, 0x67, 0x65, 0x54, 0x74, 0x61, 0x67, 0x4e, 0x73,
	0x53, 0x74, 0x65, 0x61, 0x64, 0x79, 0x22, 0xb3, 0x01, 0x0a, 0x0a, 0x44, 0x61, 0x74, 0x61, 0x53,
	0x6f, 0x75, 0x72, 0x63, 0x65, 0x12, 0x0d, 0x0a, 0x09, 0x44, 0x53, 0x5f, 0x4e, 0x4f, 0x44, 0x41,
	0x54, 0x41, 0x10, 0x00, 0x12, 0x0a, 0x0a, 0x06, 0x44, 0x53, 0x5f, 0x49, 0x4d, 0x55, 0x10, 0x01,
	0x12, 0x0b, 0x0a, 0x07, 0x44, 0x53, 0x5f, 0x41, 0x48, 0x52, 0x53, 0x10, 0x02, 0x12, 0x0a, 0x0a,
	0x06, 0x44, 0x53, 0x5f, 0x47, 0x50, 0x53, 0x10, 0x03, 0x12, 0x0c, 0x0a, 0x08, 0x44, 0x53, 0x5f,
	0x44, 0x45, 0x50, 0x54, 0x48, 0x10, 0x04, 0x12, 0x0f, 0x0a, 0x0b, 0x44, 0x53, 0x5f, 0x41, 0x4c,
	0x54, 0x49, 0x54, 0x55, 0x44, 0x45, 0x10, 0x05, 0x12, 0x0c, 0x0a, 0x08, 0x44, 0x53, 0x5f, 0x53,
	0x50, 0x45, 0x45, 0x44, 0x10, 0x06, 0x12, 0x11, 0x0a, 0x0d, 0x44, 0x53, 0x5f, 0x45, 0x53, 0x54,
	0x49, 0x4d, 0x41, 0x54, 0x49, 0x4f, 0x4e, 0x10, 0x07, 0x12, 0x12, 0x0a, 0x0e, 0x44, 0x53, 0x5f,
	0x43, 0x4f, 0x4d, 0x50, 0x55, 0x54, 0x41, 0x54, 0x49, 0x4f, 0x4e, 0x10, 0x08, 0x12, 0x11, 0x0a,
	0x0d, 0x44, 0x53, 0x5f, 0x53, 0x49, 0x4d, 0x55, 0x4c, 0x41, 0x54, 0x49, 0x4f, 0x4e, 0x10, 0x09,
	0x12, 0x0a, 0x0a, 0x06, 0x44, 0x53, 0x5f, 0x49, 0x4e, 0x53, 0x10, 0x0a, 0x42, 0x0b, 0x0a, 0x09,
	0x5f, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x42, 0x0b, 0x0a, 0x09, 0x5f, 0x61, 0x74,
	0x74, 0x69, 0x74, 0x75, 0x64, 0x65, 0x42, 0x0f, 0x0a, 0x0d, 0x5f, 0x61, 0x6e, 0x67, 0x75, 0x6c,
	0x61, 0x72, 0x5f, 0x72, 0x61, 0x74, 0x65, 0x42, 0x0f, 0x0a, 0x0d, 0x5f, 0x61, 0x63, 0x63, 0x65,
	0x6c, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x42, 0x11, 0x0a, 0x0f, 0x5f, 0x6d, 0x61, 0x67,
	0x6e, 0x65, 0x74, 0x69, 0x63, 0x5f, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x42, 0x0a, 0x0a, 0x08, 0x5f,
	0x64, 0x65, 0x70, 0x74, 0x68, 0x5f, 0x6d, 0x42, 0x0d, 0x0a, 0x0b, 0x5f, 0x61, 0x6c, 0x74, 0x69,
	0x74, 0x75, 0x64, 0x65, 0x5f, 0x6d, 0x42, 0x0c, 0x0a, 0x0a, 0x5f, 0x73, 0x70, 0x65, 0x65, 0x64,
	0x5f, 0x6d, 0x70, 0x73, 0x42, 0x0d, 0x0a, 0x0b, 0x5f, 0x63, 0x6f, 0x75, 0x72, 0x73, 0x65, 0x5f,
	0x64, 0x65, 0x67, 0x42, 0x10, 0x0a, 0x0e, 0x5f, 0x62, 0x6f, 0x64, 0x79, 0x5f, 0x76, 0x65, 0x6c,
	0x6f, 0x63, 0x69, 0x74, 0x79, 0x42, 0x10, 0x0a, 0x0e, 0x5f, 0x77, 0x61, 0x74, 0x65, 0x72, 0x5f,
	0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x74, 0x42, 0x1b, 0x0a, 0x19, 0x5f, 0x77, 0x61, 0x74, 0x65,
	0x72, 0x5f, 0x72, 0x65, 0x6c, 0x61, 0x74, 0x69, 0x76, 0x65, 0x5f, 0x73, 0x70, 0x65, 0x65, 0x64,
	0x5f, 0x6d, 0x70, 0x73, 0x42, 0x0d, 0x0a, 0x0b, 0x5f, 0x66, 0x75, 0x65, 0x6c, 0x5f, 0x67, 0x61,
	0x75, 0x67, 0x65, 0x22, 0xef, 0x02, 0x0a, 0x06, 0x41, 0x68, 0x72, 0x73, 0x49, 0x66, 0x12, 0x4f,
	0x0a, 0x0c, 0x61, 0x6e, 0x67, 0x75, 0x6c, 0x61, 0x72, 0x5f, 0x72, 0x61, 0x74, 0x65, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x27, 0x2e, 0x6d, 0x61, 0x67, 0x6f, 0x74, 0x68, 0x79, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x61, 0x75, 0x74, 0x6f, 0x70, 0x69, 0x6c, 0x6f,
	0x74, 0x2e, 0x41, 0x6e, 0x67, 0x75, 0x6c, 0x61, 0x72, 0x52, 0x61, 0x74, 0x65, 0x48, 0x00, 0x52,
	0x0b, 0x61, 0x6e, 0x67, 0x75, 0x6c, 0x61, 0x72, 0x52, 0x61, 0x74, 0x65, 0x88, 0x01, 0x01, 0x12,
	0x51, 0x0a, 0x0c, 0x61, 0x63, 0x63, 0x65, 0x6c, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x28, 0x2e, 0x6d, 0x61, 0x67, 0x6f, 0x74, 0x68, 0x79, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x61, 0x75, 0x74, 0x6f, 0x70, 0x69, 0x6c,
	0x6f, 0x74, 0x2e, 0x41, 0x63, 0x63, 0x65, 0x6c, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x48,
	0x01, 0x52, 0x0c, 0x61, 0x63, 0x63, 0x65, 0x6c, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x88,
	0x01, 0x01, 0x12, 0x4a, 0x0a, 0x08, 0x6d, 0x61, 0x67, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x29, 0x2e, 0x6d, 0x61, 0x67, 0x6f, 0x74, 0x68, 0x79, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x61, 0x75, 0x74, 0x6f, 0x70, 0x69, 0x6c, 0x6f,
	0x74, 0x2e, 0x4d, 0x61, 0x67, 0x6e, 0x65, 0x74, 0x69, 0x63, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x48,
	0x02, 0x52, 0x08, 0x6d, 0x61, 0x67, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x88, 0x01, 0x01, 0x12, 0x3c,
	0x0a, 0x05, 0x65, 0x75, 0x6c, 0x65, 0x72, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x21, 0x2e,
	0x6d, 0x61, 0x67, 0x6f, 0x74, 0x68, 0x79, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66,
	0x2e, 0x61, 0x75, 0x74, 0x6f, 0x70, 0x69, 0x6c, 0x6f, 0x74, 0x2e, 0x45, 0x75, 0x6c, 0x65, 0x72,
	0x48, 0x03, 0x52, 0x05, 0x65, 0x75, 0x6c, 0x65, 0x72, 0x88, 0x01, 0x01, 0x42, 0x0f, 0x0a, 0x0d,
	0x5f, 0x61, 0x6e, 0x67, 0x75, 0x6c, 0x61, 0x72, 0x5f, 0x72, 0x61, 0x74, 0x65, 0x42, 0x0f, 0x0a,
	0x0d, 0x5f, 0x61, 0x63, 0x63, 0x65, 0x6c, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x42, 0x0b,
	0x0a, 0x09, 0x5f, 0x6d, 0x61, 0x67, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x42, 0x08, 0x0a, 0x06, 0x5f,
	0x65, 0x75, 0x6c, 0x65, 0x72, 0x22, 0x3f, 0x0a, 0x0a, 0x41, 0x6c, 0x74, 0x69, 0x74, 0x75, 0x64,
	0x65, 0x49, 0x66, 0x12, 0x22, 0x0a, 0x0a, 0x61, 0x6c, 0x74, 0x69, 0x74, 0x75, 0x64, 0x65, 0x5f,
	0x6d, 0x18, 0x01, 0x20, 0x01, 0x28, 0x01, 0x48, 0x00, 0x52, 0x09, 0x61, 0x6c, 0x74, 0x69, 0x74,
	0x75, 0x64, 0x65, 0x4d, 0x88, 0x01, 0x01, 0x42, 0x0d, 0x0a, 0x0b, 0x5f, 0x61, 0x6c, 0x74, 0x69,
	0x74, 0x75, 0x64, 0x65, 0x5f, 0x6d, 0x22, 0xc3, 0x01, 0x0a, 0x09, 0x42, 0x61, 0x74, 0x74, 0x65,
	0x72, 0x79, 0x49, 0x66, 0x12, 0x20, 0x0a, 0x09, 0x76, 0x6f, 0x6c, 0x74, 0x61, 0x67, 0x65, 0x5f,
	0x56, 0x18, 0x01, 0x20, 0x01, 0x28, 0x01, 0x48, 0x00, 0x52, 0x08, 0x76, 0x6f, 0x6c, 0x74, 0x61,
	0x67, 0x65, 0x56, 0x88, 0x01, 0x01, 0x12, 0x20, 0x0a, 0x09, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e,
	0x74, 0x5f, 0x41, 0x18, 0x02, 0x20, 0x01, 0x28, 0x01, 0x48, 0x01, 0x52, 0x08, 0x63, 0x75, 0x72,
	0x72, 0x65, 0x6e, 0x74, 0x41, 0x88, 0x01, 0x01, 0x12, 0x3a, 0x0a, 0x17, 0x73, 0x74, 0x61, 0x74,
	0x65, 0x5f, 0x6f, 0x66, 0x5f, 0x63, 0x68, 0x61, 0x72, 0x67, 0x65, 0x5f, 0x70, 0x65, 0x72, 0x63,
	0x65, 0x6e, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x48, 0x02, 0x52, 0x14, 0x73, 0x74, 0x61,
	0x74, 0x65, 0x4f, 0x66, 0x43, 0x68, 0x61, 0x72, 0x67, 0x65, 0x50, 0x65, 0x72, 0x63, 0x65, 0x6e,
	0x74, 0x88, 0x01, 0x01, 0x42, 0x0c, 0x0a, 0x0a, 0x5f, 0x76, 0x6f, 0x6c, 0x74, 0x61, 0x67, 0x65,
	0x5f, 0x56, 0x42, 0x0c, 0x0a, 0x0a, 0x5f, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x74, 0x5f, 0x41,
	0x42, 0x1a, 0x0a, 0x18, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x5f, 0x6f, 0x66, 0x5f, 0x63, 0x68,
	0x61, 0x72, 0x67, 0x65, 0x5f, 0x70, 0x65, 0x72, 0x63, 0x65, 0x6e, 0x74, 0x22, 0x33, 0x0a, 0x07,
	0x44, 0x65, 0x70, 0x74, 0x68, 0x49, 0x66, 0x12, 0x1c, 0x0a, 0x07, 0x64, 0x65, 0x70, 0x74, 0x68,
	0x5f, 0x6d, 0x18, 0x01, 0x20, 0x01, 0x28, 0x01, 0x48, 0x00, 0x52, 0x06, 0x64, 0x65, 0x70, 0x74,
	0x68, 0x4d, 0x88, 0x01, 0x01, 0x42, 0x0a, 0x0a, 0x08, 0x5f, 0x64, 0x65, 0x70, 0x74, 0x68, 0x5f,
	0x6d, 0x22, 0x26, 0x0a, 0x0a, 0x45, 0x66, 0x66, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x49, 0x66, 0x12,
	0x18, 0x0a, 0x07, 0x63, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x18, 0x01, 0x20, 0x03, 0x28, 0x01,
	0x52, 0x07, 0x63, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x22, 0x9e, 0x05, 0x0a, 0x05, 0x49, 0x6e,
	0x73, 0x49, 0x66, 0x12, 0x4f, 0x0a, 0x0c, 0x61, 0x6e, 0x67, 0x75, 0x6c, 0x61, 0x72, 0x5f, 0x72,
	0x61, 0x74, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x27, 0x2e, 0x6d, 0x61, 0x67, 0x6f,
	0x74, 0x68, 0x79, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x61, 0x75, 0x74,
	0x6f, 0x70, 0x69, 0x6c, 0x6f, 0x74, 0x2e, 0x41, 0x6e, 0x67, 0x75, 0x6c, 0x61, 0x72, 0x52, 0x61,
	0x74, 0x65, 0x48, 0x00, 0x52, 0x0b, 0x61, 0x6e, 0x67, 0x75, 0x6c, 0x61, 0x72, 0x52, 0x61, 0x74,
	0x65, 0x88, 0x01, 0x01, 0x12, 0x51, 0x0a, 0x0c, 0x61, 0x63, 0x63, 0x65, 0x6c, 0x65, 0x72, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x28, 0x2e, 0x6d, 0x61, 0x67,
	0x6f, 0x74, 0x68, 0x79, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x61, 0x75,
	0x74, 0x6f, 0x70, 0x69, 0x6c, 0x6f, 0x74, 0x2e, 0x41, 0x63, 0x63, 0x65, 0x6c, 0x65, 0x72, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x48, 0x01, 0x52, 0x0c, 0x61, 0x63, 0x63, 0x65, 0x6c, 0x65, 0x72, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x88, 0x01, 0x01, 0x12, 0x4a, 0x0a, 0x08, 0x6d, 0x61, 0x67, 0x66, 0x69,
	0x65, 0x6c, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x29, 0x2e, 0x6d, 0x61, 0x67, 0x6f,
	0x74, 0x68, 0x79, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x61, 0x75, 0x74,
	0x6f, 0x70, 0x69, 0x6c, 0x6f, 0x74, 0x2e, 0x4d, 0x61, 0x67, 0x6e, 0x65, 0x74, 0x69, 0x63, 0x46,
	0x69, 0x65, 0x6c, 0x64, 0x48, 0x02, 0x52, 0x08, 0x6d, 0x61, 0x67, 0x66, 0x69, 0x65, 0x6c, 0x64,
	0x88, 0x01, 0x01, 0x12, 0x3c, 0x0a, 0x05, 0x65, 0x75, 0x6c, 0x65, 0x72, 0x18, 0x04, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x21, 0x2e, 0x6d, 0x61, 0x67, 0x6f, 0x74, 0x68, 0x79, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x61, 0x75, 0x74, 0x6f, 0x70, 0x69, 0x6c, 0x6f, 0x74, 0x2e,
	0x45, 0x75, 0x6c, 0x65, 0x72, 0x48, 0x03, 0x52, 0x05, 0x65, 0x75, 0x6c, 0x65, 0x72, 0x88, 0x01,
	0x01, 0x12, 0x52, 0x0a, 0x0d, 0x62, 0x6f, 0x64, 0x79, 0x5f, 0x76, 0x65, 0x6c, 0x6f, 0x63, 0x69,
	0x74, 0x79, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x28, 0x2e, 0x6d, 0x61, 0x67, 0x6f, 0x74,
	0x68, 0x79, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x61, 0x75, 0x74, 0x6f,
	0x70, 0x69, 0x6c, 0x6f, 0x74, 0x2e, 0x42, 0x6f, 0x64, 0x79, 0x56, 0x65, 0x6c, 0x6f, 0x63, 0x69,
	0x74, 0x79, 0x48, 0x04, 0x52, 0x0c, 0x62, 0x6f, 0x64, 0x79, 0x56, 0x65, 0x6c, 0x6f, 0x63, 0x69,
	0x74, 0x79, 0x88, 0x01, 0x01, 0x12, 0x45, 0x0a, 0x08, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f,
	0x6e, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x24, 0x2e, 0x6d, 0x61, 0x67, 0x6f, 0x74, 0x68,
	0x79, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x61, 0x75, 0x74, 0x6f, 0x70,
	0x69, 0x6c, 0x6f, 0x74, 0x2e, 0x50, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x48, 0x05, 0x52,
	0x08, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x88, 0x01, 0x01, 0x12, 0x5e, 0x0a, 0x11,
	0x69, 0x6e, 0x65, 0x72, 0x74, 0x69, 0x61, 0x6c, 0x5f, 0x76, 0x65, 0x6c, 0x6f, 0x63, 0x69, 0x74,
	0x79, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2c, 0x2e, 0x6d, 0x61, 0x67, 0x6f, 0x74, 0x68,
	0x79, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x61, 0x75, 0x74, 0x6f, 0x70,
	0x69, 0x6c, 0x6f, 0x74, 0x2e, 0x49, 0x6e, 0x65, 0x72, 0x74, 0x69, 0x61, 0x6c, 0x56, 0x65, 0x6c,
	0x6f, 0x63, 0x69, 0x74, 0x79, 0x48, 0x06, 0x52, 0x10, 0x69, 0x6e, 0x65, 0x72, 0x74, 0x69, 0x61,
	0x6c, 0x56, 0x65, 0x6c, 0x6f, 0x63, 0x69, 0x74, 0x79, 0x88, 0x01, 0x01, 0x42, 0x0f, 0x0a, 0x0d,
	0x5f, 0x61, 0x6e, 0x67, 0x75, 0x6c, 0x61, 0x72, 0x5f, 0x72, 0x61, 0x74, 0x65, 0x42, 0x0f, 0x0a,
	0x0d, 0x5f, 0x61, 0x63, 0x63, 0x65, 0x6c, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x42, 0x0b,
	0x0a, 0x09, 0x5f, 0x6d, 0x61, 0x67, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x42, 0x08, 0x0a, 0x06, 0x5f,
	0x65, 0x75, 0x6c, 0x65, 0x72, 0x42, 0x10, 0x0a, 0x0e, 0x5f, 0x62, 0x6f, 0x64, 0x79, 0x5f, 0x76,
	0x65, 0x6c, 0x6f, 0x63, 0x69, 0x74, 0x79, 0x42, 0x0b, 0x0a, 0x09, 0x5f, 0x70, 0x6f, 0x73, 0x69,
	0x74, 0x69, 0x6f, 0x6e, 0x42, 0x14, 0x0a, 0x12, 0x5f, 0x69, 0x6e, 0x65, 0x72, 0x74, 0x69, 0x61,
	0x6c, 0x5f, 0x76, 0x65, 0x6c, 0x6f, 0x63, 0x69, 0x74, 0x79, 0x22, 0x9d, 0x07, 0x0a, 0x05, 0x47,
	0x70, 0x73, 0x49, 0x66, 0x12, 0x49, 0x0a, 0x08, 0x72, 0x6d, 0x63, 0x5f, 0x64, 0x61, 0x74, 0x61,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x29, 0x2e, 0x6d, 0x61, 0x67, 0x6f, 0x74, 0x68, 0x79,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x61, 0x75, 0x74, 0x6f, 0x70, 0x69,
	0x6c, 0x6f, 0x74, 0x2e, 0x47, 0x70, 0x73, 0x49, 0x66, 0x2e, 0x52, 0x6d, 0x63, 0x44, 0x61, 0x74,
	0x61, 0x48, 0x00, 0x52, 0x07, 0x72, 0x6d, 0x63, 0x44, 0x61, 0x74, 0x61, 0x88, 0x01, 0x01, 0x12,
	0x49, 0x0a, 0x08, 0x67, 0x67, 0x61, 0x5f, 0x64, 0x61, 0x74, 0x61, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x29, 0x2e, 0x6d, 0x61, 0x67, 0x6f, 0x74, 0x68, 0x79, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x62, 0x75, 0x66, 0x2e, 0x61, 0x75, 0x74, 0x6f, 0x70, 0x69, 0x6c, 0x6f, 0x74, 0x2e, 0x47,
	0x70, 0x73, 0x49, 0x66, 0x2e, 0x47, 0x67, 0x61, 0x44, 0x61, 0x74, 0x61, 0x48, 0x01, 0x52, 0x07,
	0x67, 0x67, 0x61, 0x44, 0x61, 0x74, 0x61, 0x88, 0x01, 0x01, 0x1a, 0x80, 0x02, 0x0a, 0x07, 0x52,
	0x6d, 0x63, 0x44, 0x61, 0x74, 0x61, 0x12, 0x26, 0x0a, 0x0c, 0x6c, 0x61, 0x74, 0x69, 0x74, 0x75,
	0x64, 0x65, 0x5f, 0x64, 0x65, 0x67, 0x18, 0x01, 0x20, 0x01, 0x28, 0x01, 0x48, 0x00, 0x52, 0x0b,
	0x6c, 0x61, 0x74, 0x69, 0x74, 0x75, 0x64, 0x65, 0x44, 0x65, 0x67, 0x88, 0x01, 0x01, 0x12, 0x28,
	0x0a, 0x0d, 0x6c, 0x6f, 0x6e, 0x67, 0x69, 0x74, 0x75, 0x64, 0x65, 0x5f, 0x64, 0x65, 0x67, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x01, 0x48, 0x01, 0x52, 0x0c, 0x6c, 0x6f, 0x6e, 0x67, 0x69, 0x74, 0x75,
	0x64, 0x65, 0x44, 0x65, 0x67, 0x88, 0x01, 0x01, 0x12, 0x2b, 0x0a, 0x0f, 0x67, 0x72, 0x6f, 0x75,
	0x6e, 0x64, 0x5f, 0x73, 0x70, 0x65, 0x65, 0x64, 0x5f, 0x6b, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x01, 0x48, 0x02, 0x52, 0x0d, 0x67, 0x72, 0x6f, 0x75, 0x6e, 0x64, 0x53, 0x70, 0x65, 0x65, 0x64,
	0x4b, 0x74, 0x88, 0x01, 0x01, 0x12, 0x2b, 0x0a, 0x0f, 0x63, 0x6f, 0x75, 0x72, 0x73, 0x65, 0x5f,
	0x74, 0x72, 0x75, 0x65, 0x5f, 0x64, 0x65, 0x67, 0x18, 0x04, 0x20, 0x01, 0x28, 0x01, 0x48, 0x03,
	0x52, 0x0d, 0x63, 0x6f, 0x75, 0x72, 0x73, 0x65, 0x54, 0x72, 0x75, 0x65, 0x44, 0x65, 0x67, 0x88,
	0x01, 0x01, 0x42, 0x0f, 0x0a, 0x0d, 0x5f, 0x6c, 0x61, 0x74, 0x69, 0x74, 0x75, 0x64, 0x65, 0x5f,
	0x64, 0x65, 0x67, 0x42, 0x10, 0x0a, 0x0e, 0x5f, 0x6c, 0x6f, 0x6e, 0x67, 0x69, 0x74, 0x75, 0x64,
	0x65, 0x5f, 0x64, 0x65, 0x67, 0x42, 0x12, 0x0a, 0x10, 0x5f, 0x67, 0x72, 0x6f, 0x75, 0x6e, 0x64,
	0x5f, 0x73, 0x70, 0x65, 0x65, 0x64, 0x5f, 0x6b, 0x74, 0x42, 0x12, 0x0a, 0x10, 0x5f, 0x63, 0x6f,
	0x75, 0x72, 0x73, 0x65, 0x5f, 0x74, 0x72, 0x75, 0x65, 0x5f, 0x64, 0x65, 0x67, 0x1a, 0xe0, 0x03,
	0x0a, 0x07, 0x47, 0x67, 0x61, 0x44, 0x61, 0x74, 0x61, 0x12, 0x26, 0x0a, 0x0c, 0x6c, 0x61, 0x74,
	0x69, 0x74, 0x75, 0x64, 0x65, 0x5f, 0x64, 0x65, 0x67, 0x18, 0x01, 0x20, 0x01, 0x28, 0x01, 0x48,
	0x00, 0x52, 0x0b, 0x6c, 0x61, 0x74, 0x69, 0x74, 0x75, 0x64, 0x65, 0x44, 0x65, 0x67, 0x88, 0x01,
	0x01, 0x12, 0x28, 0x0a, 0x0d, 0x6c, 0x6f, 0x6e, 0x67, 0x69, 0x74, 0x75, 0x64, 0x65, 0x5f, 0x64,
	0x65, 0x67, 0x18, 0x02, 0x20, 0x01, 0x28, 0x01, 0x48, 0x01, 0x52, 0x0c, 0x6c, 0x6f, 0x6e, 0x67,
	0x69, 0x74, 0x75, 0x64, 0x65, 0x44, 0x65, 0x67, 0x88, 0x01, 0x01, 0x12, 0x22, 0x0a, 0x0a, 0x61,
	0x6c, 0x74, 0x69, 0x74, 0x75, 0x64, 0x65, 0x5f, 0x6d, 0x18, 0x03, 0x20, 0x01, 0x28, 0x01, 0x48,
	0x02, 0x52, 0x09, 0x61, 0x6c, 0x74, 0x69, 0x74, 0x75, 0x64, 0x65, 0x4d, 0x88, 0x01, 0x01, 0x12,
	0x28, 0x0a, 0x0d, 0x6e, 0x75, 0x6d, 0x5f, 0x73, 0x61, 0x74, 0x65, 0x6c, 0x6c, 0x69, 0x74, 0x65,
	0x18, 0x04, 0x20, 0x01, 0x28, 0x05, 0x48, 0x03, 0x52, 0x0c, 0x6e, 0x75, 0x6d, 0x53, 0x61, 0x74,
	0x65, 0x6c, 0x6c, 0x69, 0x74, 0x65, 0x88, 0x01, 0x01, 0x12, 0x55, 0x0a, 0x0b, 0x66, 0x69, 0x78,
	0x5f, 0x71, 0x75, 0x61, 0x6c, 0x69, 0x74, 0x79, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x34,
	0x2e, 0x6d, 0x61, 0x67, 0x6f, 0x74, 0x68, 0x79, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75,
	0x66, 0x2e, 0x61, 0x75, 0x74, 0x6f, 0x70, 0x69, 0x6c, 0x6f, 0x74, 0x2e, 0x47, 0x70, 0x73, 0x49,
	0x66, 0x2e, 0x47, 0x67, 0x61, 0x44, 0x61, 0x74, 0x61, 0x2e, 0x46, 0x69, 0x78, 0x51, 0x75, 0x61,
	0x6c, 0x69, 0x74, 0x79, 0x52, 0x0a, 0x66, 0x69, 0x78, 0x51, 0x75, 0x61, 0x6c, 0x69, 0x74, 0x79,
	0x22, 0x99, 0x01, 0x0a, 0x0a, 0x46, 0x69, 0x78, 0x51, 0x75, 0x61, 0x6c, 0x69, 0x74, 0x79, 0x12,
	0x0e, 0x0a, 0x0a, 0x46, 0x51, 0x5f, 0x49, 0x4e, 0x56, 0x41, 0x4c, 0x49, 0x44, 0x10, 0x00, 0x12,
	0x0a, 0x0a, 0x06, 0x46, 0x51, 0x5f, 0x47, 0x50, 0x53, 0x10, 0x01, 0x12, 0x0b, 0x0a, 0x07, 0x46,
	0x51, 0x5f, 0x44, 0x47, 0x50, 0x53, 0x10, 0x02, 0x12, 0x0a, 0x0a, 0x06, 0x46, 0x51, 0x5f, 0x50,
	0x50, 0x53, 0x10, 0x03, 0x12, 0x10, 0x0a, 0x0c, 0x46, 0x51, 0x5f, 0x52, 0x54, 0x4b, 0x5f, 0x46,
	0x49, 0x58, 0x45, 0x44, 0x10, 0x04, 0x12, 0x10, 0x0a, 0x0c, 0x46, 0x51, 0x5f, 0x52, 0x54, 0x4b,
	0x5f, 0x46, 0x4c, 0x4f, 0x41, 0x54, 0x10, 0x05, 0x12, 0x10, 0x0a, 0x0c, 0x46, 0x51, 0x5f, 0x45,
	0x53, 0x54, 0x49, 0x4d, 0x41, 0x54, 0x45, 0x44, 0x10, 0x06, 0x12, 0x0d, 0x0a, 0x09, 0x46, 0x51,
	0x5f, 0x4d, 0x41, 0x4e, 0x55, 0x41, 0x4c, 0x10, 0x07, 0x12, 0x11, 0x0a, 0x0d, 0x46, 0x51, 0x5f,
	0x53, 0x49, 0x4d, 0x55, 0x4c, 0x41, 0x54, 0x49, 0x4f, 0x4e, 0x10, 0x08, 0x42, 0x0f, 0x0a, 0x0d,
	0x5f, 0x6c, 0x61, 0x74, 0x69, 0x74, 0x75, 0x64, 0x65, 0x5f, 0x64, 0x65, 0x67, 0x42, 0x10, 0x0a,
	0x0e, 0x5f, 0x6c, 0x6f, 0x6e, 0x67, 0x69, 0x74, 0x75, 0x64, 0x65, 0x5f, 0x64, 0x65, 0x67, 0x42,
	0x0d, 0x0a, 0x0b, 0x5f, 0x61, 0x6c, 0x74, 0x69, 0x74, 0x75, 0x64, 0x65, 0x5f, 0x6d, 0x42, 0x10,
	0x0a, 0x0e, 0x5f, 0x6e, 0x75, 0x6d, 0x5f, 0x73, 0x61, 0x74, 0x65, 0x6c, 0x6c, 0x69, 0x74, 0x65,
	0x42, 0x0b, 0x0a, 0x09, 0x5f, 0x72, 0x6d, 0x63, 0x5f, 0x64, 0x61, 0x74, 0x61, 0x42, 0x0b, 0x0a,
	0x09, 0x5f, 0x67, 0x67, 0x61, 0x5f, 0x64, 0x61, 0x74, 0x61, 0x22, 0x85, 0x06, 0x0a, 0x0a, 0x4f,
	0x62, 0x73, 0x74, 0x61, 0x63, 0x6c, 0x65, 0x49, 0x66, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x12, 0x47, 0x0a, 0x06, 0x63, 0x69, 0x72,
	0x63, 0x6c, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2d, 0x2e, 0x6d, 0x61, 0x67, 0x6f,
	0x74, 0x68, 0x79, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x61, 0x75, 0x74,
	0x6f, 0x70, 0x69, 0x6c, 0x6f, 0x74, 0x2e, 0x4f, 0x62, 0x73, 0x74, 0x61, 0x63, 0x6c, 0x65, 0x49,
	0x66, 0x2e, 0x43, 0x69, 0x72, 0x63, 0x6c, 0x65, 0x48, 0x00, 0x52, 0x06, 0x63, 0x69, 0x72, 0x63,
	0x6c, 0x65, 0x12, 0x4a, 0x0a, 0x07, 0x70, 0x6f, 0x6c, 0x79, 0x67, 0x6f, 0x6e, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x2e, 0x2e, 0x6d, 0x61, 0x67, 0x6f, 0x74, 0x68, 0x79, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x61, 0x75, 0x74, 0x6f, 0x70, 0x69, 0x6c, 0x6f, 0x74,
	0x2e, 0x4f, 0x62, 0x73, 0x74, 0x61, 0x63, 0x6c, 0x65, 0x49, 0x66, 0x2e, 0x50, 0x6f, 0x6c, 0x79,
	0x67, 0x6f, 0x6e, 0x48, 0x00, 0x52, 0x07, 0x70, 0x6f, 0x6c, 0x79, 0x67, 0x6f, 0x6e, 0x12, 0x4c,
	0x0a, 0x09, 0x7a, 0x6f, 0x6e, 0x65, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x0e, 0x32, 0x2f, 0x2e, 0x6d, 0x61, 0x67, 0x6f, 0x74, 0x68, 0x79, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x62, 0x75, 0x66, 0x2e, 0x61, 0x75, 0x74, 0x6f, 0x70, 0x69, 0x6c, 0x6f, 0x74, 0x2e, 0x4f,
	0x62, 0x73, 0x74, 0x61, 0x63, 0x6c, 0x65, 0x49, 0x66, 0x2e, 0x5a, 0x6f, 0x6e, 0x65, 0x54, 0x79,
	0x70, 0x65, 0x52, 0x08, 0x7a, 0x6f, 0x6e, 0x65, 0x54, 0x79, 0x70, 0x65, 0x12, 0x23, 0x0a, 0x0d,
	0x69, 0x73, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x61, 0x72, 0x79, 0x18, 0x05, 0x20,
	0x01, 0x28, 0x08, 0x52, 0x0c, 0x69, 0x73, 0x53, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x61, 0x72,
	0x79, 0x12, 0x1d, 0x0a, 0x0a, 0x6c, 0x69, 0x66, 0x65, 0x73, 0x70, 0x61, 0x6e, 0x5f, 0x73, 0x18,
	0x06, 0x20, 0x01, 0x28, 0x01, 0x52, 0x09, 0x6c, 0x69, 0x66, 0x65, 0x73, 0x70, 0x61, 0x6e, 0x53,
	0x12, 0x22, 0x0a, 0x0a, 0x63, 0x6f, 0x75, 0x72, 0x73, 0x65, 0x5f, 0x64, 0x65, 0x67, 0x18, 0x07,
	0x20, 0x01, 0x28, 0x01, 0x48, 0x01, 0x52, 0x09, 0x63, 0x6f, 0x75, 0x72, 0x73, 0x65, 0x44, 0x65,
	0x67, 0x88, 0x01, 0x01, 0x12, 0x20, 0x0a, 0x09, 0x73, 0x70, 0x65, 0x65, 0x64, 0x5f, 0x6d, 0x70,
	0x73, 0x18, 0x08, 0x20, 0x01, 0x28, 0x01, 0x48, 0x02, 0x52, 0x08, 0x73, 0x70, 0x65, 0x65, 0x64,
	0x4d, 0x70, 0x73, 0x88, 0x01, 0x01, 0x12, 0x55, 0x0a, 0x11, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x5f,
	0x6f, 0x66, 0x5f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x65, 0x73, 0x74, 0x18, 0x09, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x24, 0x2e, 0x6d, 0x61, 0x67, 0x6f, 0x74, 0x68, 0x79, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x62, 0x75, 0x66, 0x2e, 0x61, 0x75, 0x74, 0x6f, 0x70, 0x69, 0x6c, 0x6f, 0x74, 0x2e, 0x50,
	0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x48, 0x03, 0x52, 0x0f, 0x70, 0x6f, 0x69, 0x6e, 0x74,
	0x4f, 0x66, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x65, 0x73, 0x74, 0x88, 0x01, 0x01, 0x1a, 0x61, 0x0a,
	0x06, 0x43, 0x69, 0x72, 0x63, 0x6c, 0x65, 0x12, 0x3c, 0x0a, 0x06, 0x6f, 0x72, 0x69, 0x67, 0x69,
	0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x24, 0x2e, 0x6d, 0x61, 0x67, 0x6f, 0x74, 0x68,
	0x79, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x61, 0x75, 0x74, 0x6f, 0x70,
	0x69, 0x6c, 0x6f, 0x74, 0x2e, 0x50, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x06, 0x6f,
	0x72, 0x69, 0x67, 0x69, 0x6e, 0x12, 0x19, 0x0a, 0x08, 0x72, 0x61, 0x64, 0x69, 0x75, 0x73, 0x5f,
	0x6d, 0x18, 0x02, 0x20, 0x01, 0x28, 0x01, 0x52, 0x07, 0x72, 0x61, 0x64, 0x69, 0x75, 0x73, 0x4d,
	0x1a, 0x4b, 0x0a, 0x07, 0x50, 0x6f, 0x6c, 0x79, 0x67, 0x6f, 0x6e, 0x12, 0x40, 0x0a, 0x08, 0x76,
	0x65, 0x72, 0x74, 0x69, 0x63, 0x65, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x24, 0x2e,
	0x6d, 0x61, 0x67, 0x6f, 0x74, 0x68, 0x79, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66,
	0x2e, 0x61, 0x75, 0x74, 0x6f, 0x70, 0x69, 0x6c, 0x6f, 0x74, 0x2e, 0x50, 0x6f, 0x73, 0x69, 0x74,
	0x69, 0x6f, 0x6e, 0x52, 0x08, 0x76, 0x65, 0x72, 0x74, 0x69, 0x63, 0x65, 0x73, 0x22, 0x2f, 0x0a,
	0x08, 0x5a, 0x6f, 0x6e, 0x65, 0x54, 0x79, 0x70, 0x65, 0x12, 0x11, 0x0a, 0x0d, 0x5a, 0x4f, 0x4e,
	0x45, 0x5f, 0x4b, 0x45, 0x45, 0x50, 0x5f, 0x4f, 0x55, 0x54, 0x10, 0x00, 0x12, 0x10, 0x0a, 0x0c,
	0x5a, 0x4f, 0x4e, 0x45, 0x5f, 0x4b, 0x45, 0x45, 0x50, 0x5f, 0x49, 0x4e, 0x10, 0x01, 0x42, 0x0f,
	0x0a, 0x0d, 0x4f, 0x62, 0x73, 0x74, 0x61, 0x63, 0x6c, 0x65, 0x4f, 0x6e, 0x65, 0x4f, 0x66, 0x42,
	0x0d, 0x0a, 0x0b, 0x5f, 0x63, 0x6f, 0x75, 0x72, 0x73, 0x65, 0x5f, 0x64, 0x65, 0x67, 0x42, 0x0c,
	0x0a, 0x0a, 0x5f, 0x73, 0x70, 0x65, 0x65, 0x64, 0x5f, 0x6d, 0x70, 0x73, 0x42, 0x14, 0x0a, 0x12,
	0x5f, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x5f, 0x6f, 0x66, 0x5f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x65,
	0x73, 0x74, 0x22, 0xb4, 0x01, 0x0a, 0x09, 0x4f, 0x62, 0x73, 0x74, 0x61, 0x63, 0x6c, 0x65, 0x73,
	0x12, 0x3b, 0x0a, 0x0b, 0x74, 0x74, 0x61, 0x67, 0x5f, 0x73, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d,
	0x70, 0x52, 0x0a, 0x74, 0x74, 0x61, 0x67, 0x53, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x12, 0x24, 0x0a,
	0x0e, 0x74, 0x74, 0x61, 0x67, 0x5f, 0x73, 0x74, 0x65, 0x61, 0x64, 0x79, 0x5f, 0x6e, 0x73, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0c, 0x74, 0x74, 0x61, 0x67, 0x53, 0x74, 0x65, 0x61, 0x64,
	0x79, 0x4e, 0x73, 0x12, 0x44, 0x0a, 0x09, 0x6f, 0x62, 0x73, 0x74, 0x61, 0x63, 0x6c, 0x65, 0x73,
	0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x26, 0x2e, 0x6d, 0x61, 0x67, 0x6f, 0x74, 0x68, 0x79,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x61, 0x75, 0x74, 0x6f, 0x70, 0x69,
	0x6c, 0x6f, 0x74, 0x2e, 0x4f, 0x62, 0x73, 0x74, 0x61, 0x63, 0x6c, 0x65, 0x49, 0x66, 0x52, 0x09,
	0x6f, 0x62, 0x73, 0x74, 0x61, 0x63, 0x6c, 0x65, 0x73, 0x22, 0xda, 0x04, 0x0a, 0x04, 0x50, 0x61,
	0x74, 0x68, 0x12, 0x3b, 0x0a, 0x0b, 0x74, 0x74, 0x61, 0x67, 0x5f, 0x73, 0x79, 0x73, 0x74, 0x65,
	0x6d, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74,
	0x61, 0x6d, 0x70, 0x52, 0x0a, 0x74, 0x74, 0x61, 0x67, 0x53, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x12,
	0x24, 0x0a, 0x0e, 0x74, 0x74, 0x61, 0x67, 0x5f, 0x73, 0x74, 0x65, 0x61, 0x64, 0x79, 0x5f, 0x6e,
	0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0c, 0x74, 0x74, 0x61, 0x67, 0x53, 0x74, 0x65,
	0x61, 0x64, 0x79, 0x4e, 0x73, 0x12, 0x38, 0x0a, 0x04, 0x70, 0x61, 0x74, 0x68, 0x18, 0x03, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x24, 0x2e, 0x6d, 0x61, 0x67, 0x6f, 0x74, 0x68, 0x79, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x61, 0x75, 0x74, 0x6f, 0x70, 0x69, 0x6c, 0x6f, 0x74,
	0x2e, 0x50, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x04, 0x70, 0x61, 0x74, 0x68, 0x12,
	0x44, 0x0a, 0x09, 0x6f, 0x62, 0x73, 0x74, 0x61, 0x63, 0x6c, 0x65, 0x73, 0x18, 0x04, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x26, 0x2e, 0x6d, 0x61, 0x67, 0x6f, 0x74, 0x68, 0x79, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x61, 0x75, 0x74, 0x6f, 0x70, 0x69, 0x6c, 0x6f, 0x74, 0x2e,
	0x4f, 0x62, 0x73, 0x74, 0x61, 0x63, 0x6c, 0x65, 0x49, 0x66, 0x52, 0x09, 0x6f, 0x62, 0x73, 0x74,
	0x61, 0x63, 0x6c, 0x65, 0x73, 0x12, 0x20, 0x0a, 0x09, 0x73, 0x70, 0x65, 0x65, 0x64, 0x5f, 0x6d,
	0x70, 0x73, 0x18, 0x05, 0x20, 0x01, 0x28, 0x01, 0x48, 0x00, 0x52, 0x08, 0x73, 0x70, 0x65, 0x65,
	0x64, 0x4d, 0x70, 0x73, 0x88, 0x01, 0x01, 0x12, 0x3f, 0x0a, 0x05, 0x73, 0x74, 0x61, 0x72, 0x74,
	0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x24, 0x2e, 0x6d, 0x61, 0x67, 0x6f, 0x74, 0x68, 0x79,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x61, 0x75, 0x74, 0x6f, 0x70, 0x69,
	0x6c, 0x6f, 0x74, 0x2e, 0x50, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x48, 0x01, 0x52, 0x05,
	0x73, 0x74, 0x61, 0x72, 0x74, 0x88, 0x01, 0x01, 0x12, 0x46, 0x0a, 0x09, 0x65, 0x6e, 0x64, 0x5f,
	0x6c, 0x6f, 0x63, 0x61, 0x6c, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x24, 0x2e, 0x6d, 0x61,
	0x67, 0x6f, 0x74, 0x68, 0x79, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x61,
	0x75, 0x74, 0x6f, 0x70, 0x69, 0x6c, 0x6f, 0x74, 0x2e, 0x50, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f,
	0x6e, 0x48, 0x02, 0x52, 0x08, 0x65, 0x6e, 0x64, 0x4c, 0x6f, 0x63, 0x61, 0x6c, 0x88, 0x01, 0x01,
	0x12, 0x48, 0x0a, 0x0a, 0x65, 0x6e, 0x64, 0x5f, 0x67, 0x6c, 0x6f, 0x62, 0x61, 0x6c, 0x18, 0x08,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x24, 0x2e, 0x6d, 0x61, 0x67, 0x6f, 0x74, 0x68, 0x79, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x61, 0x75, 0x74, 0x6f, 0x70, 0x69, 0x6c, 0x6f,
	0x74, 0x2e, 0x50, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x48, 0x03, 0x52, 0x09, 0x65, 0x6e,
	0x64, 0x47, 0x6c, 0x6f, 0x62, 0x61, 0x6c, 0x88, 0x01, 0x01, 0x12, 0x45, 0x0a, 0x0b, 0x67, 0x6c,
	0x6f, 0x62, 0x61, 0x6c, 0x5f, 0x70, 0x61, 0x74, 0x68, 0x18, 0x09, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x24, 0x2e, 0x6d, 0x61, 0x67, 0x6f, 0x74, 0x68, 0x79, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62,
	0x75, 0x66, 0x2e, 0x61, 0x75, 0x74, 0x6f, 0x70, 0x69, 0x6c, 0x6f, 0x74, 0x2e, 0x50, 0x6f, 0x73,
	0x69, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x0a, 0x67, 0x6c, 0x6f, 0x62, 0x61, 0x6c, 0x50, 0x61, 0x74,
	0x68, 0x42, 0x0c, 0x0a, 0x0a, 0x5f, 0x73, 0x70, 0x65, 0x65, 0x64, 0x5f, 0x6d, 0x70, 0x73, 0x42,
	0x08, 0x0a, 0x06, 0x5f, 0x73, 0x74, 0x61, 0x72, 0x74, 0x42, 0x0c, 0x0a, 0x0a, 0x5f, 0x65, 0x6e,
	0x64, 0x5f, 0x6c, 0x6f, 0x63, 0x61, 0x6c, 0x42, 0x0d, 0x0a, 0x0b, 0x5f, 0x65, 0x6e, 0x64, 0x5f,
	0x67, 0x6c, 0x6f, 0x62, 0x61, 0x6c, 0x22, 0x8f, 0x08, 0x0a, 0x0e, 0x56, 0x65, 0x68, 0x69, 0x63,
	0x6c, 0x65, 0x53, 0x74, 0x61, 0x74, 0x65, 0x49, 0x66, 0x12, 0x17, 0x0a, 0x07, 0x74, 0x74, 0x61,
	0x67, 0x5f, 0x6e, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x06, 0x74, 0x74, 0x61, 0x67,
	0x4e, 0x73, 0x12, 0x4a, 0x0a, 0x0c, 0x76, 0x65, 0x68, 0x69, 0x63, 0x6c, 0x65, 0x5f, 0x64, 0x61,
	0x74, 0x61, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x27, 0x2e, 0x6d, 0x61, 0x67, 0x6f, 0x74,
	0x68, 0x79, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x61, 0x75, 0x74, 0x6f,
	0x70, 0x69, 0x6c, 0x6f, 0x74, 0x2e, 0x56, 0x65, 0x68, 0x69, 0x63, 0x6c, 0x65, 0x44, 0x61, 0x74,
	0x61, 0x52, 0x0b, 0x76, 0x65, 0x68, 0x69, 0x63, 0x6c, 0x65, 0x44, 0x61, 0x74, 0x61, 0x12, 0x43,
	0x0a, 0x04, 0x6d, 0x6f, 0x64, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x2f, 0x2e, 0x6d,
	0x61, 0x67, 0x6f, 0x74, 0x68, 0x79, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e,
	0x61, 0x75, 0x74, 0x6f, 0x70, 0x69, 0x6c, 0x6f, 0x74, 0x2e, 0x56, 0x65, 0x68, 0x69, 0x63, 0x6c,
	0x65, 0x53, 0x74, 0x61, 0x74, 0x65, 0x49, 0x66, 0x2e, 0x4d, 0x6f, 0x64, 0x65, 0x52, 0x04, 0x6d,
	0x6f, 0x64, 0x65, 0x12, 0x58, 0x0a, 0x0c, 0x68, 0x65, 0x61, 0x6c, 0x74, 0x68, 0x5f, 0x69, 0x74,
	0x65, 0x6d, 0x73, 0x18, 0x04, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x35, 0x2e, 0x6d, 0x61, 0x67, 0x6f,
	0x74, 0x68, 0x79, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x61, 0x75, 0x74,
	0x6f, 0x70, 0x69, 0x6c, 0x6f, 0x74, 0x2e, 0x56, 0x65, 0x68, 0x69, 0x63, 0x6c, 0x65, 0x53, 0x74,
	0x61, 0x74, 0x65, 0x49, 0x66, 0x2e, 0x48, 0x65, 0x61, 0x6c, 0x74, 0x68, 0x49, 0x74, 0x65, 0x6d,
	0x52, 0x0b, 0x68, 0x65, 0x61, 0x6c, 0x74, 0x68, 0x49, 0x74, 0x65, 0x6d, 0x73, 0x12, 0x64, 0x0a,
	0x0e, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x5f, 0x72, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x18,
	0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x38, 0x2e, 0x6d, 0x61, 0x67, 0x6f, 0x74, 0x68, 0x79, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x61, 0x75, 0x74, 0x6f, 0x70, 0x69, 0x6c,
	0x6f, 0x74, 0x2e, 0x56, 0x65, 0x68, 0x69, 0x63, 0x6c, 0x65, 0x53, 0x74, 0x61, 0x74, 0x65, 0x49,
	0x66, 0x2e, 0x46, 0x61, 0x75, 0x6c, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x48,
	0x00, 0x52, 0x0d, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x88, 0x01, 0x01, 0x1a, 0xa5, 0x01, 0x0a, 0x0a, 0x48, 0x65, 0x61, 0x6c, 0x74, 0x68, 0x49, 0x74,
	0x65, 0x6d, 0x12, 0x14, 0x0a, 0x05, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0d, 0x52, 0x05, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x12, 0x10, 0x0a, 0x03, 0x75, 0x69, 0x64, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x75, 0x69, 0x64, 0x12, 0x1b, 0x0a, 0x09, 0x73, 0x65,
	0x6e, 0x73, 0x6f, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x08, 0x73,
	0x65, 0x6e, 0x73, 0x6f, 0x72, 0x49, 0x64, 0x12, 0x19, 0x0a, 0x08, 0x69, 0x73, 0x5f, 0x76, 0x61,
	0x6c, 0x69, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x08, 0x52, 0x07, 0x69, 0x73, 0x56, 0x61, 0x6c,
	0x69, 0x64, 0x12, 0x18, 0x0a, 0x07, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x18, 0x05, 0x20,
	0x01, 0x28, 0x08, 0x52, 0x07, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x12, 0x1d, 0x0a, 0x0a,
	0x69, 0x73, 0x5f, 0x68, 0x65, 0x61, 0x6c, 0x74, 0x68, 0x79, 0x18, 0x06, 0x20, 0x01, 0x28, 0x08,
	0x52, 0x09, 0x69, 0x73, 0x48, 0x65, 0x61, 0x6c, 0x74, 0x68, 0x79, 0x1a, 0x9e, 0x01, 0x0a, 0x0d,
	0x46, 0x61, 0x75, 0x6c, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x61, 0x0a,
	0x0d, 0x72, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0e, 0x32, 0x3c, 0x2e, 0x6d, 0x61, 0x67, 0x6f, 0x74, 0x68, 0x79, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x61, 0x75, 0x74, 0x6f, 0x70, 0x69, 0x6c, 0x6f,
	0x74, 0x2e, 0x56, 0x65, 0x68, 0x69, 0x63, 0x6c, 0x65, 0x53, 0x74, 0x61, 0x74, 0x65, 0x49, 0x66,
	0x2e, 0x46, 0x61, 0x75, 0x6c, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x54, 0x79,
	0x70, 0x65, 0x52, 0x0c, 0x72, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x54, 0x79, 0x70, 0x65,
	0x12, 0x2a, 0x0a, 0x11, 0x68, 0x65, 0x61, 0x6c, 0x74, 0x68, 0x5f, 0x69, 0x74, 0x65, 0x6d, 0x5f,
	0x69, 0x6e, 0x64, 0x65, 0x78, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0f, 0x68, 0x65, 0x61,
	0x6c, 0x74, 0x68, 0x49, 0x74, 0x65, 0x6d, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x22, 0xa2, 0x01, 0x0a,
	0x04, 0x4d, 0x6f, 0x64, 0x65, 0x12, 0x0e, 0x0a, 0x0a, 0x56, 0x53, 0x5f, 0x53, 0x54, 0x41, 0x4e,
	0x44, 0x42, 0x59, 0x10, 0x00, 0x12, 0x0d, 0x0a, 0x09, 0x56, 0x53, 0x5f, 0x4d, 0x41, 0x4e, 0x55,
	0x41, 0x4c, 0x10, 0x01, 0x12, 0x16, 0x0a, 0x12, 0x56, 0x53, 0x5f, 0x48, 0x45, 0x41, 0x4c, 0x54,
	0x48, 0x59, 0x5f, 0x4d, 0x49, 0x53, 0x53, 0x49, 0x4f, 0x4e, 0x10, 0x02, 0x12, 0x18, 0x0a, 0x14,
	0x56, 0x53, 0x5f, 0x55, 0x4e, 0x48, 0x45, 0x41, 0x4c, 0x54, 0x48, 0x59, 0x5f, 0x4d, 0x49, 0x53,
	0x53, 0x49, 0x4f, 0x4e, 0x10, 0x03, 0x12, 0x0d, 0x0a, 0x09, 0x56, 0x53, 0x5f, 0x4c, 0x4f, 0x49,
	0x54, 0x45, 0x52, 0x10, 0x04, 0x12, 0x17, 0x0a, 0x13, 0x56, 0x53, 0x5f, 0x4d, 0x49, 0x53, 0x53,
	0x49, 0x4f, 0x4e, 0x5f, 0x50, 0x4c, 0x41, 0x4e, 0x4e, 0x49, 0x4e, 0x47, 0x10, 0x05, 0x12, 0x21,
	0x0a, 0x1d, 0x56, 0x53, 0x5f, 0x55, 0x4e, 0x48, 0x45, 0x41, 0x4c, 0x54, 0x48, 0x59, 0x5f, 0x4d,
	0x49, 0x53, 0x53, 0x49, 0x4f, 0x4e, 0x5f, 0x50, 0x4c, 0x41, 0x4e, 0x4e, 0x49, 0x4e, 0x47, 0x10,
	0x06, 0x22, 0x91, 0x01, 0x0a, 0x11, 0x46, 0x61, 0x75, 0x6c, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x54, 0x79, 0x70, 0x65, 0x12, 0x0d, 0x0a, 0x09, 0x46, 0x52, 0x5f, 0x49, 0x47,
	0x4e, 0x4f, 0x52, 0x45, 0x10, 0x00, 0x12, 0x0b, 0x0a, 0x07, 0x46, 0x52, 0x5f, 0x48, 0x41, 0x4c,
	0x54, 0x10, 0x01, 0x12, 0x0d, 0x0a, 0x09, 0x46, 0x52, 0x5f, 0x4c, 0x4f, 0x49, 0x54, 0x45, 0x52,
	0x10, 0x02, 0x12, 0x0f, 0x0a, 0x0b, 0x46, 0x52, 0x5f, 0x47, 0x4f, 0x5f, 0x52, 0x41, 0x4c, 0x4c,
	0x59, 0x10, 0x03, 0x12, 0x0f, 0x0a, 0x0b, 0x46, 0x52, 0x5f, 0x47, 0x4f, 0x5f, 0x46, 0x49, 0x52,
	0x53, 0x54, 0x10, 0x04, 0x12, 0x0e, 0x0a, 0x0a, 0x46, 0x52, 0x5f, 0x47, 0x4f, 0x5f, 0x4c, 0x41,
	0x53, 0x54, 0x10, 0x05, 0x12, 0x10, 0x0a, 0x0c, 0x46, 0x52, 0x5f, 0x47, 0x4f, 0x5f, 0x4c, 0x41,
	0x55, 0x4e, 0x43, 0x48, 0x10, 0x06, 0x12, 0x0d, 0x0a, 0x09, 0x46, 0x52, 0x5f, 0x43, 0x55, 0x53,
	0x54, 0x4f, 0x4d, 0x10, 0x07, 0x42, 0x11, 0x0a, 0x0f, 0x5f, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x5f,
	0x72, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x94, 0x03, 0x0a, 0x15, 0x4d, 0x61, 0x76,
	0x6c, 0x69, 0x6e, 0x6b, 0x4d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x49, 0x74, 0x65, 0x6d, 0x49,
	0x6e, 0x74, 0x12, 0x23, 0x0a, 0x0d, 0x74, 0x61, 0x72, 0x67, 0x65, 0x74, 0x5f, 0x73, 0x79, 0x73,
	0x74, 0x65, 0x6d, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0c, 0x74, 0x61, 0x72, 0x67, 0x65,
	0x74, 0x53, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x12, 0x29, 0x0a, 0x10, 0x74, 0x61, 0x72, 0x67, 0x65,
	0x74, 0x5f, 0x63, 0x6f, 0x6d, 0x70, 0x6f, 0x6e, 0x65, 0x6e, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x0d, 0x52, 0x0f, 0x74, 0x61, 0x72, 0x67, 0x65, 0x74, 0x43, 0x6f, 0x6d, 0x70, 0x6f, 0x6e, 0x65,
	0x6e, 0x74, 0x12, 0x21, 0x0a, 0x0c, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x5f, 0x74, 0x79,
	0x70, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0b, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f,
	0x6e, 0x54, 0x79, 0x70, 0x65, 0x12, 0x10, 0x0a, 0x03, 0x73, 0x65, 0x71, 0x18, 0x04, 0x20, 0x01,
	0x28, 0x0d, 0x52, 0x03, 0x73, 0x65, 0x71, 0x12, 0x18, 0x0a, 0x07, 0x63, 0x6f, 0x6d, 0x6d, 0x61,
	0x6e, 0x64, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x07, 0x63, 0x6f, 0x6d, 0x6d, 0x61, 0x6e,
	0x64, 0x12, 0x14, 0x0a, 0x05, 0x66, 0x72, 0x61, 0x6d, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0d,
	0x52, 0x05, 0x66, 0x72, 0x61, 0x6d, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x63, 0x75, 0x72, 0x72, 0x65,
	0x6e, 0x74, 0x18, 0x07, 0x20, 0x01, 0x28, 0x08, 0x52, 0x07, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e,
	0x74, 0x12, 0x22, 0x0a, 0x0c, 0x61, 0x75, 0x74, 0x6f, 0x63, 0x6f, 0x6e, 0x74, 0x69, 0x6e, 0x75,
	0x65, 0x18, 0x08, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0c, 0x61, 0x75, 0x74, 0x6f, 0x63, 0x6f, 0x6e,
	0x74, 0x69, 0x6e, 0x75, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x31, 0x18,
	0x09, 0x20, 0x01, 0x28, 0x02, 0x52, 0x06, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x31, 0x12, 0x16, 0x0a,
	0x06, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x32, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x02, 0x52, 0x06, 0x70,
	0x61, 0x72, 0x61, 0x6d, 0x32, 0x12, 0x16, 0x0a, 0x06, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x33, 0x18,
	0x0b, 0x20, 0x01, 0x28, 0x02, 0x52, 0x06, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x33, 0x12, 0x16, 0x0a,
	0x06, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x34, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x02, 0x52, 0x06, 0x70,
	0x61, 0x72, 0x61, 0x6d, 0x34, 0x12, 0x0c, 0x0a, 0x01, 0x78, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x05,
	0x52, 0x01, 0x78, 0x12, 0x0c, 0x0a, 0x01, 0x79, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x05, 0x52, 0x01,
	0x79, 0x12, 0x0c, 0x0a, 0x01, 0x7a, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x02, 0x52, 0x01, 0x7a, 0x22,
	0x90, 0x02, 0x0a, 0x0e, 0x4d, 0x61, 0x76, 0x6c, 0x69, 0x6e, 0x6b, 0x4d, 0x69, 0x73, 0x73, 0x69,
	0x6f, 0x6e, 0x12, 0x56, 0x0a, 0x0d, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x74,
	0x65, 0x6d, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x31, 0x2e, 0x6d, 0x61, 0x67, 0x6f,
	0x74, 0x68, 0x79, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x61, 0x75, 0x74,
	0x6f, 0x70, 0x69, 0x6c, 0x6f, 0x74, 0x2e, 0x4d, 0x61, 0x76, 0x6c, 0x69, 0x6e, 0x6b, 0x4d, 0x69,
	0x73, 0x73, 0x69, 0x6f, 0x6e, 0x49, 0x74, 0x65, 0x6d, 0x49, 0x6e, 0x74, 0x52, 0x0c, 0x6d, 0x69,
	0x73, 0x73, 0x69, 0x6f, 0x6e, 0x49, 0x74, 0x65, 0x6d, 0x73, 0x12, 0x52, 0x0a, 0x0b, 0x66, 0x65,
	0x6e, 0x63, 0x65, 0x5f, 0x69, 0x74, 0x65, 0x6d, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x31, 0x2e, 0x6d, 0x61, 0x67, 0x6f, 0x74, 0x68, 0x79, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62,
	0x75, 0x66, 0x2e, 0x61, 0x75, 0x74, 0x6f, 0x70, 0x69, 0x6c, 0x6f, 0x74, 0x2e, 0x4d, 0x61, 0x76,
	0x6c, 0x69, 0x6e, 0x6b, 0x4d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x49, 0x74, 0x65, 0x6d, 0x49,
	0x6e, 0x74, 0x52, 0x0a, 0x66, 0x65, 0x6e, 0x63, 0x65, 0x49, 0x74, 0x65, 0x6d, 0x73, 0x12, 0x52,
	0x0a, 0x0b, 0x72, 0x61, 0x6c, 0x6c, 0x79, 0x5f, 0x69, 0x74, 0x65, 0x6d, 0x73, 0x18, 0x03, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x31, 0x2e, 0x6d, 0x61, 0x67, 0x6f, 0x74, 0x68, 0x79, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x61, 0x75, 0x74, 0x6f, 0x70, 0x69, 0x6c, 0x6f, 0x74,
	0x2e, 0x4d, 0x61, 0x76, 0x6c, 0x69, 0x6e, 0x6b, 0x4d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x49,
	0x74, 0x65, 0x6d, 0x49, 0x6e, 0x74, 0x52, 0x0a, 0x72, 0x61, 0x6c, 0x6c, 0x79, 0x49, 0x74, 0x65,
	0x6d, 0x73, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
})

var (
	file_autopilot_proto_rawDescOnce sync.Once
	file_autopilot_proto_rawDescData []byte
)

func file_autopilot_proto_rawDescGZIP() []byte {
	file_autopilot_proto_rawDescOnce.Do(func() {
		file_autopilot_proto_rawDescData = protoimpl.X.CompressGZIP(unsafe.Slice(unsafe.StringData(file_autopilot_proto_rawDesc), len(file_autopilot_proto_rawDesc)))
	})
	return file_autopilot_proto_rawDescData
}

var file_autopilot_proto_enumTypes = make([]protoimpl.EnumInfo, 5)
var file_autopilot_proto_msgTypes = make([]protoimpl.MessageInfo, 29)
var file_autopilot_proto_goTypes = []any{
	(VehicleData_DataSource)(0),           // 0: magothy.protobuf.autopilot.VehicleData.DataSource
	(GpsIf_GgaData_FixQuality)(0),         // 1: magothy.protobuf.autopilot.GpsIf.GgaData.FixQuality
	(ObstacleIf_ZoneType)(0),              // 2: magothy.protobuf.autopilot.ObstacleIf.ZoneType
	(VehicleStateIf_Mode)(0),              // 3: magothy.protobuf.autopilot.VehicleStateIf.Mode
	(VehicleStateIf_FaultResponseType)(0), // 4: magothy.protobuf.autopilot.VehicleStateIf.FaultResponseType
	(*Position)(nil),                      // 5: magothy.protobuf.autopilot.Position
	(*AngularRate)(nil),                   // 6: magothy.protobuf.autopilot.AngularRate
	(*Acceleration)(nil),                  // 7: magothy.protobuf.autopilot.Acceleration
	(*MagneticField)(nil),                 // 8: magothy.protobuf.autopilot.MagneticField
	(*Euler)(nil),                         // 9: magothy.protobuf.autopilot.Euler
	(*BodyVelocity)(nil),                  // 10: magothy.protobuf.autopilot.BodyVelocity
	(*InertialVelocity)(nil),              // 11: magothy.protobuf.autopilot.InertialVelocity
	(*WaterCurrent)(nil),                  // 12: magothy.protobuf.autopilot.WaterCurrent
	(*FuelGauge)(nil),                     // 13: magothy.protobuf.autopilot.FuelGauge
	(*VehicleData)(nil),                   // 14: magothy.protobuf.autopilot.VehicleData
	(*AhrsIf)(nil),                        // 15: magothy.protobuf.autopilot.AhrsIf
	(*AltitudeIf)(nil),                    // 16: magothy.protobuf.autopilot.AltitudeIf
	(*BatteryIf)(nil),                     // 17: magothy.protobuf.autopilot.BatteryIf
	(*DepthIf)(nil),                       // 18: magothy.protobuf.autopilot.DepthIf
	(*EffectorIf)(nil),                    // 19: magothy.protobuf.autopilot.EffectorIf
	(*InsIf)(nil),                         // 20: magothy.protobuf.autopilot.InsIf
	(*GpsIf)(nil),                         // 21: magothy.protobuf.autopilot.GpsIf
	(*ObstacleIf)(nil),                    // 22: magothy.protobuf.autopilot.ObstacleIf
	(*Obstacles)(nil),                     // 23: magothy.protobuf.autopilot.Obstacles
	(*Path)(nil),                          // 24: magothy.protobuf.autopilot.Path
	(*VehicleStateIf)(nil),                // 25: magothy.protobuf.autopilot.VehicleStateIf
	(*MavlinkMissionItemInt)(nil),         // 26: magothy.protobuf.autopilot.MavlinkMissionItemInt
	(*MavlinkMission)(nil),                // 27: magothy.protobuf.autopilot.MavlinkMission
	(*GpsIf_RmcData)(nil),                 // 28: magothy.protobuf.autopilot.GpsIf.RmcData
	(*GpsIf_GgaData)(nil),                 // 29: magothy.protobuf.autopilot.GpsIf.GgaData
	(*ObstacleIf_Circle)(nil),             // 30: magothy.protobuf.autopilot.ObstacleIf.Circle
	(*ObstacleIf_Polygon)(nil),            // 31: magothy.protobuf.autopilot.ObstacleIf.Polygon
	(*VehicleStateIf_HealthItem)(nil),     // 32: magothy.protobuf.autopilot.VehicleStateIf.HealthItem
	(*VehicleStateIf_FaultResponse)(nil),  // 33: magothy.protobuf.autopilot.VehicleStateIf.FaultResponse
	(*timestamppb.Timestamp)(nil),         // 34: google.protobuf.Timestamp
}
var file_autopilot_proto_depIdxs = []int32{
	5,  // 0: magothy.protobuf.autopilot.VehicleData.position:type_name -> magothy.protobuf.autopilot.Position
	0,  // 1: magothy.protobuf.autopilot.VehicleData.position_source:type_name -> magothy.protobuf.autopilot.VehicleData.DataSource
	9,  // 2: magothy.protobuf.autopilot.VehicleData.attitude:type_name -> magothy.protobuf.autopilot.Euler
	0,  // 3: magothy.protobuf.autopilot.VehicleData.attitude_source:type_name -> magothy.protobuf.autopilot.VehicleData.DataSource
	6,  // 4: magothy.protobuf.autopilot.VehicleData.angular_rate:type_name -> magothy.protobuf.autopilot.AngularRate
	0,  // 5: magothy.protobuf.autopilot.VehicleData.angular_rate_source:type_name -> magothy.protobuf.autopilot.VehicleData.DataSource
	7,  // 6: magothy.protobuf.autopilot.VehicleData.acceleration:type_name -> magothy.protobuf.autopilot.Acceleration
	0,  // 7: magothy.protobuf.autopilot.VehicleData.acceleration_source:type_name -> magothy.protobuf.autopilot.VehicleData.DataSource
	8,  // 8: magothy.protobuf.autopilot.VehicleData.magnetic_field:type_name -> magothy.protobuf.autopilot.MagneticField
	0,  // 9: magothy.protobuf.autopilot.VehicleData.magnetic_field_source:type_name -> magothy.protobuf.autopilot.VehicleData.DataSource
	0,  // 10: magothy.protobuf.autopilot.VehicleData.depth_source:type_name -> magothy.protobuf.autopilot.VehicleData.DataSource
	0,  // 11: magothy.protobuf.autopilot.VehicleData.altitude_source:type_name -> magothy.protobuf.autopilot.VehicleData.DataSource
	0,  // 12: magothy.protobuf.autopilot.VehicleData.speed_source:type_name -> magothy.protobuf.autopilot.VehicleData.DataSource
	0,  // 13: magothy.protobuf.autopilot.VehicleData.course_source:type_name -> magothy.protobuf.autopilot.VehicleData.DataSource
	10, // 14: magothy.protobuf.autopilot.VehicleData.body_velocity:type_name -> magothy.protobuf.autopilot.BodyVelocity
	0,  // 15: magothy.protobuf.autopilot.VehicleData.body_velocity_source:type_name -> magothy.protobuf.autopilot.VehicleData.DataSource
	12, // 16: magothy.protobuf.autopilot.VehicleData.water_current:type_name -> magothy.protobuf.autopilot.WaterCurrent
	0,  // 17: magothy.protobuf.autopilot.VehicleData.water_current_source:type_name -> magothy.protobuf.autopilot.VehicleData.DataSource
	0,  // 18: magothy.protobuf.autopilot.VehicleData.water_relative_speed_source:type_name -> magothy.protobuf.autopilot.VehicleData.DataSource
	13, // 19: magothy.protobuf.autopilot.VehicleData.fuel_gauge:type_name -> magothy.protobuf.autopilot.FuelGauge
	0,  // 20: magothy.protobuf.autopilot.VehicleData.fuel_gauge_source:type_name -> magothy.protobuf.autopilot.VehicleData.DataSource
	6,  // 21: magothy.protobuf.autopilot.AhrsIf.angular_rate:type_name -> magothy.protobuf.autopilot.AngularRate
	7,  // 22: magothy.protobuf.autopilot.AhrsIf.acceleration:type_name -> magothy.protobuf.autopilot.Acceleration
	8,  // 23: magothy.protobuf.autopilot.AhrsIf.magfield:type_name -> magothy.protobuf.autopilot.MagneticField
	9,  // 24: magothy.protobuf.autopilot.AhrsIf.euler:type_name -> magothy.protobuf.autopilot.Euler
	6,  // 25: magothy.protobuf.autopilot.InsIf.angular_rate:type_name -> magothy.protobuf.autopilot.AngularRate
	7,  // 26: magothy.protobuf.autopilot.InsIf.acceleration:type_name -> magothy.protobuf.autopilot.Acceleration
	8,  // 27: magothy.protobuf.autopilot.InsIf.magfield:type_name -> magothy.protobuf.autopilot.MagneticField
	9,  // 28: magothy.protobuf.autopilot.InsIf.euler:type_name -> magothy.protobuf.autopilot.Euler
	10, // 29: magothy.protobuf.autopilot.InsIf.body_velocity:type_name -> magothy.protobuf.autopilot.BodyVelocity
	5,  // 30: magothy.protobuf.autopilot.InsIf.position:type_name -> magothy.protobuf.autopilot.Position
	11, // 31: magothy.protobuf.autopilot.InsIf.inertial_velocity:type_name -> magothy.protobuf.autopilot.InertialVelocity
	28, // 32: magothy.protobuf.autopilot.GpsIf.rmc_data:type_name -> magothy.protobuf.autopilot.GpsIf.RmcData
	29, // 33: magothy.protobuf.autopilot.GpsIf.gga_data:type_name -> magothy.protobuf.autopilot.GpsIf.GgaData
	30, // 34: magothy.protobuf.autopilot.ObstacleIf.circle:type_name -> magothy.protobuf.autopilot.ObstacleIf.Circle
	31, // 35: magothy.protobuf.autopilot.ObstacleIf.polygon:type_name -> magothy.protobuf.autopilot.ObstacleIf.Polygon
	2,  // 36: magothy.protobuf.autopilot.ObstacleIf.zone_type:type_name -> magothy.protobuf.autopilot.ObstacleIf.ZoneType
	5,  // 37: magothy.protobuf.autopilot.ObstacleIf.point_of_interest:type_name -> magothy.protobuf.autopilot.Position
	34, // 38: magothy.protobuf.autopilot.Obstacles.ttag_system:type_name -> google.protobuf.Timestamp
	22, // 39: magothy.protobuf.autopilot.Obstacles.obstacles:type_name -> magothy.protobuf.autopilot.ObstacleIf
	34, // 40: magothy.protobuf.autopilot.Path.ttag_system:type_name -> google.protobuf.Timestamp
	5,  // 41: magothy.protobuf.autopilot.Path.path:type_name -> magothy.protobuf.autopilot.Position
	22, // 42: magothy.protobuf.autopilot.Path.obstacles:type_name -> magothy.protobuf.autopilot.ObstacleIf
	5,  // 43: magothy.protobuf.autopilot.Path.start:type_name -> magothy.protobuf.autopilot.Position
	5,  // 44: magothy.protobuf.autopilot.Path.end_local:type_name -> magothy.protobuf.autopilot.Position
	5,  // 45: magothy.protobuf.autopilot.Path.end_global:type_name -> magothy.protobuf.autopilot.Position
	5,  // 46: magothy.protobuf.autopilot.Path.global_path:type_name -> magothy.protobuf.autopilot.Position
	14, // 47: magothy.protobuf.autopilot.VehicleStateIf.vehicle_data:type_name -> magothy.protobuf.autopilot.VehicleData
	3,  // 48: magothy.protobuf.autopilot.VehicleStateIf.mode:type_name -> magothy.protobuf.autopilot.VehicleStateIf.Mode
	32, // 49: magothy.protobuf.autopilot.VehicleStateIf.health_items:type_name -> magothy.protobuf.autopilot.VehicleStateIf.HealthItem
	33, // 50: magothy.protobuf.autopilot.VehicleStateIf.fault_response:type_name -> magothy.protobuf.autopilot.VehicleStateIf.FaultResponse
	26, // 51: magothy.protobuf.autopilot.MavlinkMission.mission_items:type_name -> magothy.protobuf.autopilot.MavlinkMissionItemInt
	26, // 52: magothy.protobuf.autopilot.MavlinkMission.fence_items:type_name -> magothy.protobuf.autopilot.MavlinkMissionItemInt
	26, // 53: magothy.protobuf.autopilot.MavlinkMission.rally_items:type_name -> magothy.protobuf.autopilot.MavlinkMissionItemInt
	1,  // 54: magothy.protobuf.autopilot.GpsIf.GgaData.fix_quality:type_name -> magothy.protobuf.autopilot.GpsIf.GgaData.FixQuality
	5,  // 55: magothy.protobuf.autopilot.ObstacleIf.Circle.origin:type_name -> magothy.protobuf.autopilot.Position
	5,  // 56: magothy.protobuf.autopilot.ObstacleIf.Polygon.vertices:type_name -> magothy.protobuf.autopilot.Position
	4,  // 57: magothy.protobuf.autopilot.VehicleStateIf.FaultResponse.response_type:type_name -> magothy.protobuf.autopilot.VehicleStateIf.FaultResponseType
	58, // [58:58] is the sub-list for method output_type
	58, // [58:58] is the sub-list for method input_type
	58, // [58:58] is the sub-list for extension type_name
	58, // [58:58] is the sub-list for extension extendee
	0,  // [0:58] is the sub-list for field type_name
}

func init() { file_autopilot_proto_init() }
func file_autopilot_proto_init() {
	if File_autopilot_proto != nil {
		return
	}
	file_autopilot_proto_msgTypes[9].OneofWrappers = []any{}
	file_autopilot_proto_msgTypes[10].OneofWrappers = []any{}
	file_autopilot_proto_msgTypes[11].OneofWrappers = []any{}
	file_autopilot_proto_msgTypes[12].OneofWrappers = []any{}
	file_autopilot_proto_msgTypes[13].OneofWrappers = []any{}
	file_autopilot_proto_msgTypes[15].OneofWrappers = []any{}
	file_autopilot_proto_msgTypes[16].OneofWrappers = []any{}
	file_autopilot_proto_msgTypes[17].OneofWrappers = []any{
		(*ObstacleIf_Circle_)(nil),
		(*ObstacleIf_Polygon_)(nil),
	}
	file_autopilot_proto_msgTypes[19].OneofWrappers = []any{}
	file_autopilot_proto_msgTypes[20].OneofWrappers = []any{}
	file_autopilot_proto_msgTypes[23].OneofWrappers = []any{}
	file_autopilot_proto_msgTypes[24].OneofWrappers = []any{}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: unsafe.Slice(unsafe.StringData(file_autopilot_proto_rawDesc), len(file_autopilot_proto_rawDesc)),
			NumEnums:      5,
			NumMessages:   29,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_autopilot_proto_goTypes,
		DependencyIndexes: file_autopilot_proto_depIdxs,
		EnumInfos:         file_autopilot_proto_enumTypes,
		MessageInfos:      file_autopilot_proto_msgTypes,
	}.Build()
	File_autopilot_proto = out.File
	file_autopilot_proto_goTypes = nil
	file_autopilot_proto_depIdxs = nil
}
